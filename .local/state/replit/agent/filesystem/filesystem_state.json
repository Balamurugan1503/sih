{"file_contents":{"README.md":{"content":"# Crop Yield Prediction System\n\nA full-stack application for predicting crop yields using machine learning, built with Next.js frontend and FastAPI backend.\n\n## Features\n\n- 🔐 Firebase Authentication (Email/Password & Google Sign-in)\n- 🏡 Farm Management System\n- 🤖 ML-powered Crop Yield Predictions\n- 📊 Prediction History and Analytics\n- 🌤️ Real-time Weather Integration\n- 📱 Responsive Design\n\n## Project Structure\n\n\\`\\`\\`\ncrop-yield-prediction/\n├── frontend/              # Next.js React application\n├── backend/              # FastAPI Python backend\n│   ├── ml_models/       # Trained ML models\n│   └── requirements.txt\n├── database/            # Firestore configuration\n└── README.md\n\\`\\`\\`\n\n## Local Setup\n\n### Prerequisites\n\n- Node.js 18+ and npm\n- Python 3.8+\n- Firebase project with Firestore enabled\n- OpenWeatherMap API key (optional)\n\n### Backend Setup\n\n1. Navigate to backend directory:\n\\`\\`\\`bash\ncd backend\n\\`\\`\\`\n\n2. Create virtual environment:\n\\`\\`\\`bash\npython -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\n\\`\\`\\`\n\n3. Install dependencies:\n\\`\\`\\`bash\npip install -r requirements.txt\n\\`\\`\\`\n\n4. Create `.env` file from `.env.example` and add your Firebase credentials\n\n5. Add your Firebase service account JSON file as `firebase-service-account.json`\n\n6. Create `ml_models` directory and add your trained model files:\n\\`\\`\\`bash\nmkdir ml_models\n# Copy your yield_model.pkl and label_encoder.pkl files here\n\\`\\`\\`\n\n7. Run the backend:\n\\`\\`\\`bash\nuvicorn main:app --reload\n\\`\\`\\`\n\nBackend will be available at `http://localhost:8000`\n\n### Frontend Setup\n\n1. Install dependencies:\n\\`\\`\\`bash\nnpm install\n\\`\\`\\`\n\n2. Create `.env.local` file from `.env.local.example` and add your Firebase config\n\n3. Run the development server:\n\\`\\`\\`bash\nnpm run dev\n\\`\\`\\`\n\nFrontend will be available at `http://localhost:3000`\n\n## Firebase Configuration\n\n### Firestore Security Rules\n\n\\`\\`\\`javascript\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // Users can only access their own data\n    match /users/{userId} {\n      allow read, write: if request.auth != null && request.auth.uid == userId;\n      \n      // User's farms\n      match /farms/{farmId} {\n        allow read, write: if request.auth != null && request.auth.uid == userId;\n      }\n      \n      // User's predictions\n      match /predictions/{predictionId} {\n        allow read, write: if request.auth != null && request.auth.uid == userId;\n      }\n    }\n  }\n}\n\\`\\`\\`\n\n## API Endpoints\n\n- `POST /api/predict` - Make crop yield prediction\n- `POST /api/add-farm` - Add new farm\n- `GET /api/get-farms` - Get user's farms\n- `GET /api/get-predictions` - Get prediction history\n- `POST /api/update-profile` - Update user profile\n\n## ML Model Integration\n\nThe system uses a pre-trained CatBoost regression model for yield prediction. The model expects the following features:\n\n- Crop type (encoded)\n- Farm area (hectares)\n- Soil nutrients (N, P, K)\n- Weather data (temperature, humidity, rainfall)\n- Fertilizer and pesticide usage\n\n## Environment Variables\n\nSee `.env.example` files for required environment variables.\n\n## Security\n\n- Firebase ID token verification for all API requests\n- Firestore security rules restrict access to user's own data\n- Environment variables for sensitive configuration\n- CORS configuration for frontend-backend communication\n\n## Development\n\n- Frontend: React with TypeScript, Tailwind CSS, shadcn/ui components\n- Backend: FastAPI with Pydantic models, Firebase Admin SDK\n- Database: Firestore with structured collections\n- ML: CatBoost regression model with scikit-learn preprocessing\n\n## License\n\nMIT License\n#\u0000 \u0000s\u0000i\u0000h\u0000\r\u0000\n\u0000#\u0000 \u0000s\u0000i\u0000h\u00001\u0000\r\u0000\n\u0000","size_bytes":3761},"pnpm-lock.yaml":{"content":"lockfileVersion: '9.0'\n\nsettings:\n  autoInstallPeers: true\n  excludeLinksFromLockfile: false","size_bytes":92},"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"catboost>=1.2.8\",\n    \"fastapi>=0.117.1\",\n    \"firebase-admin>=7.1.0\",\n    \"joblib>=1.5.2\",\n    \"numpy>=2.3.3\",\n    \"pandas>=2.3.2\",\n    \"pydantic>=2.11.9\",\n    \"python-dotenv>=1.1.1\",\n    \"python-multipart>=0.0.20\",\n    \"requests>=2.32.5\",\n    \"scikit-learn>=1.7.2\",\n    \"uvicorn[standard]>=0.36.0\",\n]\n","size_bytes":450},"app/globals.css":{"content":"@import \"tailwindcss\";\n@import \"tw-animate-css\";\n\n@custom-variant dark (&:is(.dark *));\n\n:root {\n  --background: oklch(0.98 0.02 85);\n  --foreground: oklch(0.15 0.02 85);\n  --card: oklch(1 0 0);\n  --card-foreground: oklch(0.15 0.02 85);\n  --popover: oklch(1 0 0);\n  --popover-foreground: oklch(0.15 0.02 85);\n  --primary: oklch(0.22 0.05 85);\n  --primary-foreground: oklch(0.98 0.02 85);\n  --secondary: oklch(0.96 0.02 85);\n  --secondary-foreground: oklch(0.22 0.05 85);\n  --muted: oklch(0.96 0.02 85);\n  --muted-foreground: oklch(0.55 0.02 85);\n  --accent: oklch(0.75 0.15 85);\n  --accent-foreground: oklch(0.15 0.02 85);\n  --destructive: oklch(0.577 0.245 27.325);\n  --destructive-foreground: oklch(0.98 0.02 85);\n  --border: oklch(0.92 0.02 85);\n  --input: oklch(0.92 0.02 85);\n  --ring: oklch(0.75 0.15 85);\n  --chart-1: oklch(0.646 0.222 41.116);\n  --chart-2: oklch(0.6 0.118 184.704);\n  --chart-3: oklch(0.398 0.07 227.392);\n  --chart-4: oklch(0.828 0.189 84.429);\n  --chart-5: oklch(0.769 0.188 70.08);\n  --radius: 0.625rem;\n  --sidebar: oklch(0.985 0 0);\n  --sidebar-foreground: oklch(0.145 0 0);\n  --sidebar-primary: oklch(0.205 0 0);\n  --sidebar-primary-foreground: oklch(0.985 0 0);\n  --sidebar-accent: oklch(0.97 0 0);\n  --sidebar-accent-foreground: oklch(0.205 0 0);\n  --sidebar-border: oklch(0.922 0 0);\n  --sidebar-ring: oklch(0.708 0 0);\n}\n\n.dark {\n  --background: oklch(0.12 0.02 85);\n  --foreground: oklch(0.98 0.02 85);\n  --card: oklch(0.15 0.02 85);\n  --card-foreground: oklch(0.98 0.02 85);\n  --popover: oklch(0.15 0.02 85);\n  --popover-foreground: oklch(0.98 0.02 85);\n  --primary: oklch(0.75 0.15 85);\n  --primary-foreground: oklch(0.12 0.02 85);\n  --secondary: oklch(0.22 0.05 85);\n  --secondary-foreground: oklch(0.98 0.02 85);\n  --muted: oklch(0.22 0.05 85);\n  --muted-foreground: oklch(0.65 0.02 85);\n  --accent: oklch(0.75 0.15 85);\n  --accent-foreground: oklch(0.12 0.02 85);\n  --destructive: oklch(0.396 0.141 25.723);\n  --destructive-foreground: oklch(0.98 0.02 85);\n  --border: oklch(0.22 0.05 85);\n  --input: oklch(0.22 0.05 85);\n  --ring: oklch(0.75 0.15 85);\n  --chart-1: oklch(0.488 0.243 264.376);\n  --chart-2: oklch(0.696 0.17 162.48);\n  --chart-3: oklch(0.769 0.188 70.08);\n  --chart-4: oklch(0.627 0.265 303.9);\n  --chart-5: oklch(0.645 0.246 16.439);\n  --sidebar: oklch(0.205 0 0);\n  --sidebar-foreground: oklch(0.985 0 0);\n  --sidebar-primary: oklch(0.488 0.243 264.376);\n  --sidebar-primary-foreground: oklch(0.985 0 0);\n  --sidebar-accent: oklch(0.269 0 0);\n  --sidebar-accent-foreground: oklch(0.985 0 0);\n  --sidebar-border: oklch(0.269 0 0);\n  --sidebar-ring: oklch(0.439 0 0);\n}\n\n@theme inline {\n  --font-sans: var(--font-geist-sans);\n  --font-mono: var(--font-geist-mono);\n  --color-background: var(--background);\n  --color-foreground: var(--foreground);\n  --color-card: var(--card);\n  --color-card-foreground: var(--card-foreground);\n  --color-popover: var(--popover);\n  --color-popover-foreground: var(--popover-foreground);\n  --color-primary: var(--primary);\n  --color-primary-foreground: var(--primary-foreground);\n  --color-secondary: var(--secondary);\n  --color-secondary-foreground: var(--secondary-foreground);\n  --color-muted: var(--muted);\n  --color-muted-foreground: var(--muted-foreground);\n  --color-accent: var(--accent);\n  --color-accent-foreground: var(--accent-foreground);\n  --color-destructive: var(--destructive);\n  --color-destructive-foreground: var(--destructive-foreground);\n  --color-border: var(--border);\n  --color-input: var(--input);\n  --color-ring: var(--ring);\n  --color-chart-1: var(--chart-1);\n  --color-chart-2: var(--chart-2);\n  --color-chart-3: var(--chart-3);\n  --color-chart-4: var(--chart-4);\n  --color-chart-5: var(--chart-5);\n  --radius-sm: calc(var(--radius) - 4px);\n  --radius-md: calc(var(--radius) - 2px);\n  --radius-lg: var(--radius);\n  --radius-xl: calc(var(--radius) + 4px);\n  --color-sidebar: var(--sidebar);\n  --color-sidebar-foreground: var(--sidebar-foreground);\n  --color-sidebar-primary: var(--sidebar-primary);\n  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);\n  --color-sidebar-accent: var(--sidebar-accent);\n  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);\n  --color-sidebar-border: var(--sidebar-border);\n  --color-sidebar-ring: var(--sidebar-ring);\n}\n\n@layer base {\n  * {\n    @apply border-border outline-ring/50;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n}\n","size_bytes":4428},"app/layout.tsx":{"content":"import type React from \"react\"\nimport type { Metadata } from \"next\"\nimport { GeistSans } from \"geist/font/sans\"\nimport { GeistMono } from \"geist/font/mono\"\nimport { Analytics } from \"@vercel/analytics/next\"\nimport { AuthProvider } from \"@/contexts/auth-context\"\nimport { Suspense } from \"react\"\nimport \"./globals.css\"\n\nexport const metadata: Metadata = {\n  title: \"v0 App\",\n  description: \"Created with v0\",\n  generator: \"v0.app\",\n}\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode\n}>) {\n  return (\n    <html lang=\"en\">\n      <body className={`font-sans ${GeistSans.variable} ${GeistMono.variable}`}>\n        <Suspense fallback={null}>\n          <AuthProvider>{children}</AuthProvider>\n        </Suspense>\n        <Analytics />\n      </body>\n    </html>\n  )\n}\n","size_bytes":803},"app/page.tsx":{"content":"\"use client\"\n\nimport Link from \"next/link\"\nimport { Button } from \"@/components/ui/button\"\nimport { Alert, AlertDescription } from \"@/components/ui/alert\"\nimport { Sprout, BarChart3, Users, Shield, AlertTriangle } from \"lucide-react\"\nimport { useEffect, useState } from \"react\"\n\nexport default function HomePage() {\n  const [showFirebaseWarning, setShowFirebaseWarning] = useState(false)\n\n  useEffect(() => {\n    const hasFirebaseConfig = !!(\n      process.env.NEXT_PUBLIC_FIREBASE_API_KEY &&\n      process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN &&\n      process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID\n    )\n\n    setShowFirebaseWarning(!hasFirebaseConfig)\n  }, [])\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-accent/20 via-background to-accent/10\">\n      {showFirebaseWarning && (\n        <div className=\"bg-destructive/10 border-b border-destructive/20\">\n          <div className=\"container mx-auto px-4 py-3\">\n            <Alert className=\"border-destructive/20 bg-transparent\">\n              <AlertTriangle className=\"h-4 w-4 text-destructive\" />\n              <AlertDescription className=\"text-destructive\">\n                <strong>Firebase Configuration Required:</strong> Please set up your Firebase environment variables in\n                Project Settings to enable authentication and database features.\n                <br />\n                <span className=\"text-sm\">\n                  Required: NEXT_PUBLIC_FIREBASE_API_KEY, NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,\n                  NEXT_PUBLIC_FIREBASE_PROJECT_ID, NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,\n                  NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID, NEXT_PUBLIC_FIREBASE_APP_ID\n                </span>\n              </AlertDescription>\n            </Alert>\n          </div>\n        </div>\n      )}\n\n      {/* Header */}\n      <header className=\"border-b border-border/50 bg-card/50 backdrop-blur-sm\">\n        <div className=\"container mx-auto px-4 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n                <Sprout className=\"w-5 h-5 text-primary-foreground\" />\n              </div>\n              <span className=\"text-xl font-bold text-foreground\">CropPredict</span>\n            </div>\n            <div className=\"flex items-center gap-4\">\n              <Link href=\"/login\">\n                <Button variant=\"ghost\" disabled={showFirebaseWarning}>\n                  Sign In\n                </Button>\n              </Link>\n              <Link href=\"/register\">\n                <Button disabled={showFirebaseWarning}>Get Started</Button>\n              </Link>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <main className=\"container mx-auto px-4 py-16\">\n        <div className=\"text-center max-w-4xl mx-auto\">\n          <h1 className=\"text-5xl md:text-6xl font-bold text-foreground mb-6 text-balance\">\n            AI-Powered Crop Yield Prediction\n          </h1>\n          <p className=\"text-xl text-muted-foreground mb-8 text-balance max-w-2xl mx-auto\">\n            Make data-driven farming decisions with machine learning. Predict crop yields, optimize resources, and\n            maximize your harvest.\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Link href=\"/register\">\n              <Button size=\"lg\" className=\"text-lg px-8 py-6\">\n                Start Predicting\n              </Button>\n            </Link>\n            <Link href=\"/login\">\n              <Button size=\"lg\" variant=\"outline\" className=\"text-lg px-8 py-6 bg-transparent\">\n                Sign In\n              </Button>\n            </Link>\n          </div>\n        </div>\n\n        {/* Features */}\n        <div className=\"grid md:grid-cols-3 gap-8 mt-24\">\n          <div className=\"text-center p-6\">\n            <div className=\"w-16 h-16 bg-primary/10 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n              <BarChart3 className=\"w-8 h-8 text-primary\" />\n            </div>\n            <h3 className=\"text-xl font-semibold text-foreground mb-2\">Accurate Predictions</h3>\n            <p className=\"text-muted-foreground\">\n              Advanced machine learning models trained on comprehensive agricultural data to provide reliable yield\n              forecasts.\n            </p>\n          </div>\n\n          <div className=\"text-center p-6\">\n            <div className=\"w-16 h-16 bg-primary/10 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n              <Users className=\"w-8 h-8 text-primary\" />\n            </div>\n            <h3 className=\"text-xl font-semibold text-foreground mb-2\">Farm Management</h3>\n            <p className=\"text-muted-foreground\">\n              Manage multiple farms, track soil conditions, weather data, and maintain detailed records of your\n              agricultural operations.\n            </p>\n          </div>\n\n          <div className=\"text-center p-6\">\n            <div className=\"w-16 h-16 bg-primary/10 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n              <Shield className=\"w-8 h-8 text-primary\" />\n            </div>\n            <h3 className=\"text-xl font-semibold text-foreground mb-2\">Secure & Private</h3>\n            <p className=\"text-muted-foreground\">\n              Your farm data is protected with enterprise-grade security. Only you have access to your predictions and\n              farm information.\n            </p>\n          </div>\n        </div>\n      </main>\n    </div>\n  )\n}\n","size_bytes":5625},"backend/main.py":{"content":"from fastapi import FastAPI, HTTPException, Depends, status\nfrom fastapi.security import HTTPBearer, HTTPAuthorizationCredentials\nfrom fastapi.middleware.cors import CORSMiddleware\nimport firebase_admin\nfrom firebase_admin import credentials, firestore, auth\nfrom datetime import datetime\nimport os\nfrom dotenv import load_dotenv\nfrom pydantic import BaseModel\nfrom typing import Optional, Dict, Any, List\nimport requests\nimport uuid\nfrom model_utils import predictor\n\nload_dotenv()\n\napp = FastAPI(title=\"Crop Yield Prediction API\", version=\"1.0.0\")\n\n# CORS middleware\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\n        \"http://localhost:3000\",\n        \"http://localhost:5000\",\n        \"https://4b840763-a29b-4843-8ef7-f75a455a14ea-00-3z5mdlxca059.sisko.replit.dev\",\n        \"https://*.replit.dev\",\n        \"*\"\n    ],\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\nimport firebase_admin\nfrom firebase_admin import credentials, firestore\n\n# Initialize Firebase Admin\nfirebase_initialized = False\ndb = None\n\ntry:\n    # For local development, use service account key\n    if os.path.exists(\"firebase-service-account.json\"):\n        cred = credentials.Certificate(\"firebase-service-account.json\")\n        if not firebase_admin._apps:\n            firebase_admin.initialize_app(cred)\n        db = firestore.client()\n        firebase_initialized = True\n        print(\"✅ Firebase initialized successfully\")\n    else:\n        print(\"⚠️ firebase-service-account.json not found\")\n        firebase_initialized = False\nexcept Exception as e:\n    print(f\"⚠️ Firebase initialization failed: {e}\")\n    print(\"Please add your firebase-service-account.json file\")\n    firebase_initialized = False\nsecurity = HTTPBearer()\n\n# Helper function to check Firebase availability\ndef require_firebase():\n    if not firebase_initialized or db is None:\n        raise HTTPException(status_code=503, detail=\"Firebase not available. Please configure Firebase credentials.\")\n\n# Load ML model on startup\n@app.on_event(\"startup\")\nasync def startup_event():\n    success = predictor.load_model()\n    if success:\n        crops = predictor.get_available_crops()\n        print(f\"✅ Available crops: {crops}\")\n    else:\n        print(\"⚠️ ML model not loaded. Predictions will not work.\")\n\n# Pydantic models\nclass PredictionRequest(BaseModel):\n    farm_id: str\n    crop: str\n    area: float\n    production: float\n    rainfall: Optional[float] = None\n    fertilizer: float\n    pesticide: float\n    # Additional fields for enhanced prediction\n    temperature: Optional[float] = None\n    humidity: Optional[float] = None\n    sowing_date: Optional[str] = None\n\nclass FarmData(BaseModel):\n    name: str\n    location: Dict[str, float]  # {\"lat\": float, \"lon\": float}\n    soil_type: str\n    area_ha: float\n\nclass UserProfile(BaseModel):\n    name: str\n    email: str\n    phone: Optional[str] = None\n    role: Optional[str] = \"farmer\"\n\n# Authentication dependency\nasync def get_current_user(credentials: HTTPAuthorizationCredentials = Depends(security)):\n    if not firebase_initialized:\n        # For development without Firebase, return a mock user\n        return {\"uid\": \"dev-user-123\", \"email\": \"dev@example.com\"}\n    \n    try:\n        # Verify Firebase ID token\n        decoded_token = auth.verify_id_token(credentials.credentials)\n        return decoded_token\n    except Exception as e:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n\n# Weather API helper\ndef get_weather_data(lat: float, lon: float) -> Dict[str, float]:\n    \"\"\"Fetch weather data from OpenWeatherMap API\"\"\"\n    api_key = os.getenv(\"OPENWEATHER_API_KEY\")\n    if not api_key:\n        # Return default values if no API key\n        return {\"temperature\": 25.0, \"humidity\": 60.0, \"rainfall\": 100.0}\n    \n    try:\n        url = f\"http://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid={api_key}&units=metric\"\n        response = requests.get(url)\n        data = response.json()\n        \n        return {\n            \"temperature\": data[\"main\"][\"temp\"],\n            \"humidity\": data[\"main\"][\"humidity\"],\n            \"rainfall\": data.get(\"rain\", {}).get(\"1h\", 0) * 24  # Convert to daily\n        }\n    except Exception as e:\n        print(f\"Weather API error: {e}\")\n        return {\"temperature\": 25.0, \"humidity\": 60.0, \"rainfall\": 100.0}\n\n@app.get(\"/\")\nasync def root():\n    return {\n        \"message\": \"Crop Yield Prediction API\", \n        \"status\": \"running\",\n        \"model_loaded\": predictor.is_loaded,\n        \"available_crops\": predictor.get_available_crops() if predictor.is_loaded else []\n    }\n\n@app.get(\"/api/crops\")\nasync def get_available_crops():\n    \"\"\"Get list of available crop types\"\"\"\n    if not predictor.is_loaded:\n        raise HTTPException(status_code=503, detail=\"ML model not available\")\n    \n    return {\"crops\": predictor.get_available_crops()}\n\n@app.post(\"/api/predict\")\nasync def predict_yield(request: PredictionRequest, user = Depends(get_current_user)):\n    if not predictor.is_loaded:\n        raise HTTPException(status_code=503, detail=\"ML model not available\")\n    \n    try:\n        user_id = user[\"uid\"]\n        request_id = str(uuid.uuid4())\n        \n        # Save prediction request to Firestore (if available)\n        prediction_ref = None\n        if firebase_initialized and db:\n            prediction_ref = db.collection(\"users\").document(user_id).collection(\"predictions\").document(request_id)\n            prediction_ref.set({\n                \"farm_id\": request.farm_id,\n                \"inputs\": request.dict(),\n                \"status\": \"pending\",\n                \"created_at\": datetime.utcnow(),\n            })\n        \n        # Get weather data if not provided and farm location is available\n        rainfall = request.rainfall\n        if rainfall is None:\n            try:\n                # Get farm location (if Firebase available)\n                if firebase_initialized and db:\n                    farm_ref = db.collection(\"users\").document(user_id).collection(\"farms\").document(request.farm_id)\n                    farm_doc = farm_ref.get()\n                    if farm_doc.exists():\n                        farm_data = farm_doc.to_dict()\n                        weather = get_weather_data(farm_data[\"location\"][\"lat\"], farm_data[\"location\"][\"lon\"])\n                        rainfall = weather[\"rainfall\"]\n                    else:\n                        rainfall = 100.0  # Default rainfall\n                else:\n                    rainfall = 100.0  # Default rainfall when Firebase unavailable\n            except Exception as e:\n                print(f\"Error getting weather data: {e}\")\n                rainfall = 100.0\n        \n        # Make prediction using the enhanced predictor\n        prediction_result = predictor.predict_yield(\n            crop=request.crop,\n            area=request.area,\n            production=request.production,\n            rainfall=rainfall,\n            fertilizer=request.fertilizer,\n            pesticide=request.pesticide\n        )\n        \n        # Format response\n        result = {\n            \"request_id\": request_id,\n            \"farm_id\": request.farm_id,\n            \"predicted_yield_kg_per_ha\": round(prediction_result[\"predicted_yield\"], 2),\n            \"confidence_interval\": {\n                \"lower\": round(prediction_result[\"confidence_interval\"][\"lower\"], 2),\n                \"upper\": round(prediction_result[\"confidence_interval\"][\"upper\"], 2)\n            },\n            \"model_version\": prediction_result[\"model_version\"],\n            \"feature_importance\": prediction_result[\"feature_importance\"],\n            \"weather_data\": {\n                \"rainfall\": rainfall,\n                \"temperature\": request.temperature,\n                \"humidity\": request.humidity\n            }\n        }\n        \n        # Update Firestore with results (if available)\n        if prediction_ref:\n            prediction_ref.update({\n                \"outputs\": result,\n                \"status\": \"complete\",\n                \"completed_at\": datetime.utcnow(),\n            })\n        \n        return result\n        \n    except Exception as e:\n        # Update status to error (if Firebase available)\n        if 'prediction_ref' in locals() and prediction_ref:\n            prediction_ref.update({\n                \"status\": \"error\",\n                \"error\": str(e),\n                \"completed_at\": datetime.utcnow(),\n            })\n        raise HTTPException(status_code=500, detail=f\"Prediction failed: {str(e)}\")\n\n@app.post(\"/api/add-farm\")\nasync def add_farm(farm: FarmData, user = Depends(get_current_user)):\n    try:\n        user_id = user[\"uid\"]\n        farm_id = str(uuid.uuid4())\n        \n        farm_data = {\n            \"farm_id\": farm_id,\n            \"name\": farm.name,\n            \"location\": farm.location,\n            \"soil_type\": farm.soil_type,\n            \"area_ha\": farm.area_ha,\n            \"created_at\": datetime.utcnow(),\n        }\n        \n        if firebase_initialized and db:\n            db.collection(\"users\").document(user_id).collection(\"farms\").document(farm_id).set(farm_data)\n            return {\"farm_id\": farm_id, \"message\": \"Farm added successfully\"}\n        else:\n            return {\"farm_id\": farm_id, \"message\": \"Farm added successfully (Firebase not available - data not persisted)\"}\n        \n    except Exception as e:\n        raise HTTPException(status_code=500, detail=f\"Failed to add farm: {str(e)}\")\n\n@app.get(\"/api/get-farms\")\nasync def get_farms(user = Depends(get_current_user)):\n    try:\n        user_id = user[\"uid\"]\n        farms = []\n        \n        if firebase_initialized and db:\n            farms_ref = db.collection(\"users\").document(user_id).collection(\"farms\")\n            for doc in farms_ref.stream():\n                farm_data = doc.to_dict()\n                farms.append(farm_data)\n        else:\n            # Return sample data when Firebase is not available\n            farms = [\n                {\n                    \"farm_id\": \"sample-farm-1\",\n                    \"name\": \"Sample Farm\",\n                    \"location\": {\"lat\": 40.7128, \"lon\": -74.0060},\n                    \"soil_type\": \"Loamy\",\n                    \"area_ha\": 10.5,\n                    \"created_at\": datetime.utcnow()\n                }\n            ]\n        \n        return {\"farms\": farms}\n        \n    except Exception as e:\n        raise HTTPException(status_code=500, detail=f\"Failed to get farms: {str(e)}\")\n\n@app.get(\"/api/get-predictions\")\nasync def get_predictions(user = Depends(get_current_user)):\n    try:\n        user_id = user[\"uid\"]\n        predictions = []\n        \n        if firebase_initialized and db:\n            predictions_ref = db.collection(\"users\").document(user_id).collection(\"predictions\")\n            for doc in predictions_ref.order_by(\"created_at\", direction=firestore.Query.DESCENDING).stream():\n                prediction_data = doc.to_dict()\n                predictions.append(prediction_data)\n        else:\n            # Return sample data when Firebase is not available\n            predictions = [\n                {\n                    \"farm_id\": \"sample-farm-1\",\n                    \"inputs\": {\"crop\": \"rice\", \"area\": 10.5},\n                    \"outputs\": {\"predicted_yield_kg_per_ha\": 4500.0},\n                    \"status\": \"complete\",\n                    \"created_at\": datetime.utcnow()\n                }\n            ]\n        \n        return {\"predictions\": predictions}\n        \n    except Exception as e:\n        raise HTTPException(status_code=500, detail=f\"Failed to get predictions: {str(e)}\")\n\n@app.post(\"/api/update-profile\")\nasync def update_profile(profile: UserProfile, user = Depends(get_current_user)):\n    try:\n        user_id = user[\"uid\"]\n        \n        profile_data = {\n            \"name\": profile.name,\n            \"email\": profile.email,\n            \"phone\": profile.phone,\n            \"role\": profile.role,\n            \"updated_at\": datetime.utcnow(),\n        }\n        \n        if firebase_initialized and db:\n            db.collection(\"users\").document(user_id).set(profile_data, merge=True)\n            return {\"message\": \"Profile updated successfully\"}\n        else:\n            return {\"message\": \"Profile updated successfully (Firebase not available - data not persisted)\"}\n        \n    except Exception as e:\n        raise HTTPException(status_code=500, detail=f\"Failed to update profile: {str(e)}\")\n\nif __name__ == \"__main__\":\n    import uvicorn\n    uvicorn.run(app, host=\"127.0.0.1\", port=8000)\n","size_bytes":12636},"backend/model_training.py":{"content":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\nfrom catboost import CatBoostRegressor\nfrom sklearn.metrics import mean_squared_error, r2_score\nimport numpy as np\n\n# Load the dataset\ntry:\n    df = pd.read_csv('crop_yield.csv')\n    print(\"File loaded successfully.\")\nexcept FileNotFoundError:\n    print(\"File not found. Please ensure the file 'crop_yield.csv' is in the same directory.\")\n    exit()\n\n# --- Clean Column Names ---\n# Standardize column names for easier access\ndf.columns = [\n    'Crop', 'Crop_Year', 'Season', 'State', 'Area', 'Production',\n    'Annual_Rainfall', 'Fertilizer', 'Pesticide', 'Yield'\n]\n\n# --- Data Preprocessing ---\n\n# Drop rows with any missing values to ensure data quality\ndf.dropna(inplace=True)\n\n# Encode the categorical 'Crop' feature into numerical values\nle = LabelEncoder()\ndf['Crop'] = le.fit_transform(df['Crop'])\n\n# Define features (X) and target (y)\n# Drop the target 'Yield' and other non-feature columns\nX = df.drop(['Yield', 'Crop_Year', 'State', 'Season'], axis=1)\ny = df['Yield']\n\n# Split data into training and testing sets (80% train, 20% test)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n\n# --- Model Training ---\n\n# Initialize and train the CatBoost Regressor model\nprint(\"\\n--- Training CatBoost Model ---\")\ncat_reg = CatBoostRegressor(random_state=42, verbose=0) # verbose=0 to suppress training output\ncat_reg.fit(X_train, y_train)\nprint(\"CatBoost model training completed.\")\n\n# --- Model Evaluation ---\n\n# Make predictions and evaluate the CatBoost model\nprint(\"\\n--- CatBoost Model Evaluation ---\")\npreds_cat = cat_reg.predict(X_test)\nrmse_cat = np.sqrt(mean_squared_error(y_test, preds_cat))\nr2_cat = r2_score(y_test, preds_cat)\nprint(f\"Root Mean Squared Error (RMSE): {rmse_cat}\")\nprint(f\"R-squared (R2) score: {r2_cat}\")      \n\nimport joblib\nimport os\n\n# Create folder for saving model if it doesn't exist\nos.makedirs(\"ml_models\", exist_ok=True)\n\n# Define or load your trained CatBoost model before saving\n# Example: Load an existing model (replace with your actual model loading/training code)\n# from catboost import CatBoostRegressor\n# cat_reg = CatBoostRegressor()\n# cat_reg.load_model(\"path_to_trained_model.cbm\")\n\n# Save trained CatBoost model\njoblib.dump(cat_reg, \"ml_models/yield_model.pkl\")\n\n# Save the LabelEncoder\njoblib.dump(le, \"ml_models/label_encoder.pkl\")\n\nprint(\"\\n✅ Model and encoder saved successfully in 'ml_models/' directory.\")\n","size_bytes":2528},"backend/model_utils.py":{"content":"import joblib\nimport pandas as pd\nimport numpy as np\nfrom typing import Dict, List, Optional, Tuple\nimport os\n\nclass CropYieldPredictor:\n    def __init__(self, model_path: str = \"ml_models\"):\n        self.model_path = model_path\n        self.model = None\n        self.label_encoder = None\n        self.feature_names = None\n        self.crop_mapping = None\n        self.is_loaded = False\n        \n    def load_model(self) -> bool:\n        \"\"\"Load the trained model and associated artifacts\"\"\"\n        try:\n            model_file = os.path.join(self.model_path, \"yield_model.pkl\")\n            encoder_file = os.path.join(self.model_path, \"label_encoder.pkl\")\n            features_file = os.path.join(self.model_path, \"feature_names.pkl\")\n            mapping_file = os.path.join(self.model_path, \"crop_mapping.pkl\")\n            \n            if not all(os.path.exists(f) for f in [model_file, encoder_file]):\n                print(\"❌ Model files not found. Please run the setup script first.\")\n                return False\n            \n            self.model = joblib.load(model_file)\n            self.label_encoder = joblib.load(encoder_file)\n            \n            # Load optional files\n            if os.path.exists(features_file):\n                self.feature_names = joblib.load(features_file)\n            \n            if os.path.exists(mapping_file):\n                self.crop_mapping = joblib.load(mapping_file)\n            \n            self.is_loaded = True\n            print(\"✅ Model loaded successfully\")\n            return True\n            \n        except Exception as e:\n            print(f\"❌ Error loading model: {e}\")\n            return False\n    \n    def get_available_crops(self) -> List[str]:\n        \"\"\"Get list of available crop types\"\"\"\n        if not self.is_loaded or self.label_encoder is None:\n            return []\n        return list(self.label_encoder.classes_)\n    \n    def encode_crop(self, crop_name: str) -> int:\n        \"\"\"Encode crop name to numerical value\"\"\"\n        if not self.is_loaded or self.label_encoder is None:\n            return 0\n        \n        try:\n            return self.label_encoder.transform([crop_name])[0]\n        except ValueError:\n            # If crop not in training data, return most common (0)\n            print(f\"⚠️ Unknown crop '{crop_name}', using default encoding\")\n            return 0\n    \n    def predict_yield(self, \n                     crop: str,\n                     area: float,\n                     production: float,\n                     rainfall: float,\n                     fertilizer: float,\n                     pesticide: float) -> Dict:\n        \"\"\"\n        Predict crop yield based on input features\n        \n        Args:\n            crop: Crop type name\n            area: Farm area in hectares\n            production: Expected production in metric tons\n            rainfall: Annual rainfall in mm\n            fertilizer: Fertilizer usage in kg\n            pesticide: Pesticide usage in kg\n            \n        Returns:\n            Dictionary with prediction results\n        \"\"\"\n        if not self.is_loaded:\n            raise ValueError(\"Model not loaded. Call load_model() first.\")\n        \n        try:\n            # Encode crop\n            crop_encoded = self.encode_crop(crop)\n            \n            # Prepare features array\n            features = np.array([[\n                crop_encoded,\n                area,\n                production,\n                rainfall,\n                fertilizer,\n                pesticide\n            ]])\n            \n            # Make prediction\n            predicted_yield = self.model.predict(features)[0]\n            \n            # Calculate confidence interval (simple approach using model uncertainty)\n            # For CatBoost, we can use prediction variance if available\n            try:\n                # Try to get prediction with uncertainty\n                pred_with_uncertainty = self.model.predict(features, prediction_type='TotalUncertainty')\n                uncertainty = pred_with_uncertainty[0] if len(pred_with_uncertainty) > 0 else predicted_yield * 0.1\n            except:\n                # Fallback to simple percentage-based uncertainty\n                uncertainty = predicted_yield * 0.15\n            \n            confidence_interval = {\n                \"lower\": max(0, predicted_yield - uncertainty),\n                \"upper\": predicted_yield + uncertainty\n            }\n            \n            # Get feature importance (if available)\n            feature_importance = self._get_feature_importance()\n            \n            return {\n                \"predicted_yield\": float(predicted_yield),\n                \"confidence_interval\": confidence_interval,\n                \"feature_importance\": feature_importance,\n                \"model_version\": \"catboost-v1\",\n                \"crop_encoded\": crop_encoded,\n                \"input_features\": {\n                    \"crop\": crop,\n                    \"area\": area,\n                    \"production\": production,\n                    \"rainfall\": rainfall,\n                    \"fertilizer\": fertilizer,\n                    \"pesticide\": pesticide\n                }\n            }\n            \n        except Exception as e:\n            raise ValueError(f\"Prediction failed: {str(e)}\")\n    \n    def _get_feature_importance(self) -> List[Dict[str, float]]:\n        \"\"\"Get feature importance from the model\"\"\"\n        if not hasattr(self.model, 'feature_importances_'):\n            return []\n        \n        feature_names = self.feature_names or [\n            'crop', 'area', 'production', 'rainfall', 'fertilizer', 'pesticide'\n        ]\n        \n        importances = self.model.feature_importances_\n        \n        # Create feature importance list\n        importance_list = []\n        for name, importance in zip(feature_names, importances):\n            importance_list.append({\n                \"feature\": name,\n                \"importance\": float(importance)\n            })\n        \n        # Sort by importance (descending)\n        importance_list.sort(key=lambda x: x['importance'], reverse=True)\n        \n        return importance_list[:5]  # Return top 5 features\n\n# Global predictor instance\npredictor = CropYieldPredictor()\n","size_bytes":6226},"components/theme-provider.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport {\n  ThemeProvider as NextThemesProvider,\n  type ThemeProviderProps,\n} from 'next-themes'\n\nexport function ThemeProvider({ children, ...props }: ThemeProviderProps) {\n  return <NextThemesProvider {...props}>{children}</NextThemesProvider>\n}\n","size_bytes":292},"contexts/auth-context.tsx":{"content":"\"use client\"\n\nimport type React from \"react\"\nimport { createContext, useContext, useEffect, useState } from \"react\"\n\ninterface LocalUser {\n  uid: string\n  email: string | null\n  displayName: string | null\n}\n\ninterface AuthContextType {\n  user: LocalUser | null\n  profile: any | null\n  loading: boolean\n  refreshProfile: () => Promise<void>\n  firebaseConfigured: boolean\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined)\n\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\n  const [user, setUser] = useState<LocalUser | null>(null)\n  const [profile, setProfile] = useState<any | null>(null)\n  const [loading, setLoading] = useState(true)\n  const [firebaseConfigured, setFirebaseConfigured] = useState(false)\n\n  const refreshProfile = async () => {\n    if (!firebaseConfigured) return\n    // Will implement when Firebase is configured\n  }\n\n  useEffect(() => {\n    const hasFirebaseConfig = !!(\n      process.env.NEXT_PUBLIC_FIREBASE_API_KEY &&\n      process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN &&\n      process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID &&\n      process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET &&\n      process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID &&\n      process.env.NEXT_PUBLIC_FIREBASE_APP_ID\n    )\n\n    if (!hasFirebaseConfig) {\n      console.warn(\"Firebase environment variables are not configured. Authentication features will be disabled.\")\n      setFirebaseConfigured(false)\n      setLoading(false)\n      return\n    }\n\n    setFirebaseConfigured(true)\n\n    const initializeAuth = async () => {\n      try {\n        const { onAuthStateChange, getUserProfile } = await import(\"@/lib/auth\")\n\n        const unsubscribe = onAuthStateChange(async (firebaseUser) => {\n          if (firebaseUser) {\n            const localUser: LocalUser = {\n              uid: firebaseUser.uid,\n              email: firebaseUser.email,\n              displayName: firebaseUser.displayName,\n            }\n            setUser(localUser)\n\n            const userProfile = await getUserProfile(firebaseUser.uid)\n            setProfile(userProfile)\n          } else {\n            setUser(null)\n            setProfile(null)\n          }\n          setLoading(false)\n        })\n\n        return unsubscribe\n      } catch (error) {\n        console.error(\"Failed to initialize Firebase auth:\", error)\n        setFirebaseConfigured(false)\n        setLoading(false)\n        return undefined\n      }\n    }\n\n    let unsubscribe: (() => void) | undefined\n\n    initializeAuth().then((unsub) => {\n      unsubscribe = unsub\n    })\n\n    return () => {\n      if (unsubscribe) {\n        unsubscribe()\n      }\n    }\n  }, [])\n\n  return (\n    <AuthContext.Provider value={{ user, profile, loading, refreshProfile, firebaseConfigured }}>\n      {children}\n    </AuthContext.Provider>\n  )\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext)\n  if (context === undefined) {\n    throw new Error(\"useAuth must be used within an AuthProvider\")\n  }\n  return context\n}\n","size_bytes":3004},"hooks/use-mobile.ts":{"content":"import * as React from 'react'\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener('change', onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener('change', onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"hooks/use-toast.ts":{"content":"'use client'\n\n// Inspired by react-hot-toast library\nimport * as React from 'react'\n\nimport type { ToastActionElement, ToastProps } from '@/components/ui/toast'\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: 'ADD_TOAST',\n  UPDATE_TOAST: 'UPDATE_TOAST',\n  DISMISS_TOAST: 'DISMISS_TOAST',\n  REMOVE_TOAST: 'REMOVE_TOAST',\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType['ADD_TOAST']\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType['UPDATE_TOAST']\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType['DISMISS_TOAST']\n      toastId?: ToasterToast['id']\n    }\n  | {\n      type: ActionType['REMOVE_TOAST']\n      toastId?: ToasterToast['id']\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: 'REMOVE_TOAST',\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case 'ADD_TOAST':\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case 'UPDATE_TOAST':\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t,\n        ),\n      }\n\n    case 'DISMISS_TOAST': {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t,\n        ),\n      }\n    }\n    case 'REMOVE_TOAST':\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, 'id'>\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: 'UPDATE_TOAST',\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: 'DISMISS_TOAST', toastId: id })\n\n  dispatch({\n    type: 'ADD_TOAST',\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: 'DISMISS_TOAST', toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3945},"lib/api.ts":{"content":"import { getIdToken } from \"./auth\"\n\nconst API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || \"http://localhost:8000\"\n\nclass ApiClient {\n  private async getHeaders(): Promise<HeadersInit> {\n    const token = await getIdToken()\n    return {\n      \"Content-Type\": \"application/json\",\n      ...(token && { Authorization: `Bearer ${token}` }),\n    }\n  }\n\n  private async request<T>(endpoint: string, options: RequestInit = {}): Promise<T> {\n    const url = `${API_BASE_URL}${endpoint}`\n    const headers = await this.getHeaders()\n\n    const response = await fetch(url, {\n      ...options,\n      headers: {\n        ...headers,\n        ...options.headers,\n      },\n    })\n\n    if (!response.ok) {\n      const error = await response.json().catch(() => ({ detail: \"Unknown error\" }))\n      throw new Error(error.detail || `HTTP ${response.status}`)\n    }\n\n    return response.json()\n  }\n\n  // Farm management\n  async addFarm(farmData: {\n    name: string\n    location: { lat: number; lon: number }\n    soil_type: string\n    area_ha: number\n  }) {\n    return this.request(\"/api/add-farm\", {\n      method: \"POST\",\n      body: JSON.stringify(farmData),\n    })\n  }\n\n  async getFarms() {\n    return this.request<{ farms: any[] }>(\"/api/get-farms\")\n  }\n\n  // Predictions\n  async predictYield(predictionData: {\n    farm_id: string\n    crop: string\n    N: number\n    P: number\n    K: number\n    ph: number\n    temperature?: number\n    humidity?: number\n    rainfall?: number\n    sowing_date: string\n    area: number\n    fertilizer: number\n    pesticide: number\n  }) {\n    return this.request(\"/api/predict\", {\n      method: \"POST\",\n      body: JSON.stringify(predictionData),\n    })\n  }\n\n  async getPredictions() {\n    return this.request<{ predictions: any[] }>(\"/api/get-predictions\")\n  }\n\n  // Profile management\n  async updateProfile(profileData: {\n    name: string\n    email: string\n    phone?: string\n    role?: string\n  }) {\n    return this.request(\"/api/update-profile\", {\n      method: \"POST\",\n      body: JSON.stringify(profileData),\n    })\n  }\n}\n\nexport const apiClient = new ApiClient()\n","size_bytes":2081},"lib/auth.ts":{"content":"import {\n  signInWithEmailAndPassword,\n  createUserWithEmailAndPassword,\n  signOut,\n  onAuthStateChanged,\n  type User,\n  GoogleAuthProvider,\n  signInWithPopup,\n} from \"firebase/auth\"\nimport { doc, setDoc, getDoc } from \"firebase/firestore\"\nimport { getFirebaseAuth, getFirebaseDb } from \"./firebase\"\n\nexport interface UserProfile {\n  uid: string\n  name: string\n  email: string\n  phone?: string\n  role: string\n  createdAt: Date\n  updatedAt: Date\n}\n\n// Sign up with email and password\nexport const signUpWithEmail = async (email: string, password: string, name: string) => {\n  try {\n    const auth = getFirebaseAuth()\n    const db = getFirebaseDb()\n    const userCredential = await createUserWithEmailAndPassword(auth, email, password)\n    const user = userCredential.user\n\n    // Create user profile in Firestore\n    const userProfile: Omit<UserProfile, \"uid\"> = {\n      name,\n      email: user.email!,\n      role: \"farmer\",\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    }\n\n    await setDoc(doc(db, \"users\", user.uid), userProfile)\n\n    return { user, profile: userProfile }\n  } catch (error: any) {\n    throw new Error(error.message)\n  }\n}\n\n// Sign in with email and password\nexport const signInWithEmail = async (email: string, password: string) => {\n  try {\n    const auth = getFirebaseAuth()\n    const userCredential = await signInWithEmailAndPassword(auth, email, password)\n    return userCredential.user\n  } catch (error: any) {\n    throw new Error(error.message)\n  }\n}\n\n// Sign in with Google\nexport const signInWithGoogle = async () => {\n  try {\n    const auth = getFirebaseAuth()\n    const db = getFirebaseDb()\n    const provider = new GoogleAuthProvider()\n    const userCredential = await signInWithPopup(auth, provider)\n    const user = userCredential.user\n\n    // Check if user profile exists, if not create one\n    const userDoc = await getDoc(doc(db, \"users\", user.uid))\n    if (!userDoc.exists()) {\n      const userProfile: Omit<UserProfile, \"uid\"> = {\n        name: user.displayName || \"User\",\n        email: user.email!,\n        role: \"farmer\",\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      }\n\n      await setDoc(doc(db, \"users\", user.uid), userProfile)\n    }\n\n    return user\n  } catch (error: any) {\n    throw new Error(error.message)\n  }\n}\n\n// Sign out\nexport const signOutUser = async () => {\n  try {\n    const auth = getFirebaseAuth()\n    await signOut(auth)\n  } catch (error: any) {\n    throw new Error(error.message)\n  }\n}\n\n// Get user profile from Firestore\nexport const getUserProfile = async (uid: string): Promise<UserProfile | null> => {\n  try {\n    const db = getFirebaseDb()\n    const userDoc = await getDoc(doc(db, \"users\", uid))\n    if (userDoc.exists()) {\n      return { uid, ...userDoc.data() } as UserProfile\n    }\n    return null\n  } catch (error) {\n    console.error(\"Error getting user profile:\", error)\n    return null\n  }\n}\n\n// Auth state observer\nexport const onAuthStateChange = (callback: (user: User | null) => void) => {\n  const auth = getFirebaseAuth()\n  return onAuthStateChanged(auth, callback)\n}\n\n// Get Firebase ID token\nexport const getIdToken = async (): Promise<string | null> => {\n  try {\n    const auth = getFirebaseAuth()\n    const user = auth.currentUser\n    if (user) {\n      return await user.getIdToken()\n    }\n    return null\n  } catch (error) {\n    console.error(\"Error getting ID token:\", error)\n    return null\n  }\n}\n","size_bytes":3419},"lib/firebase.ts":{"content":"import { initializeApp, getApps, type FirebaseApp } from \"firebase/app\"\nimport { getAuth, type Auth } from \"firebase/auth\"\nimport { getFirestore, type Firestore } from \"firebase/firestore\"\n\nconst firebaseConfig = {\n  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY || \"\",\n  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN || \"\",\n  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID || \"\",\n  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET || \"\",\n  messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID || \"\",\n  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID || \"\",\n}\n\nlet app: FirebaseApp | null = null\nlet auth: Auth | null = null\nlet db: Firestore | null = null\n\nconst initializeFirebase = () => {\n  if (app) return { app, auth: auth!, db: db! }\n\n  const hasValidConfig = firebaseConfig.apiKey && firebaseConfig.projectId && firebaseConfig.authDomain\n\n  if (!hasValidConfig) {\n    throw new Error(\"Firebase configuration is missing. Please check your environment variables.\")\n  }\n\n  try {\n    app = getApps().length === 0 ? initializeApp(firebaseConfig) : getApps()[0]\n    auth = getAuth(app)\n    db = getFirestore(app)\n\n    return { app, auth, db }\n  } catch (error) {\n    console.error(\"Firebase initialization failed:\", error)\n    throw error\n  }\n}\n\nexport const getFirebaseAuth = () => {\n  const { auth } = initializeFirebase()\n  return auth\n}\n\nexport const getFirebaseDb = () => {\n  const { db } = initializeFirebase()\n  return db\n}\n\nexport const getFirebaseApp = () => {\n  const { app } = initializeFirebase()\n  return app\n}\n\n// Legacy exports for backward compatibility\nexport { getFirebaseAuth as auth, getFirebaseDb as db }\nexport default getFirebaseApp\n","size_bytes":1712},"lib/utils.ts":{"content":"import { clsx, type ClassValue } from 'clsx'\nimport { twMerge } from 'tailwind-merge'\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"scripts/setup_ml_model.py":{"content":"import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\nfrom catboost import CatBoostRegressor\nfrom sklearn.metrics import mean_squared_error, r2_score\nimport joblib\nimport os\nimport requests\n\ndef download_dataset():\n    \"\"\"Download the crop yield dataset\"\"\"\n    url = \"https://hebbkx1anhila5yf.public.blob.vercel-storage.com/crop_yield-qwxPGCFl8hNgWPNSjqMSdFpXRzUmYI.csv\"\n    \n    print(\"Downloading crop yield dataset...\")\n    response = requests.get(url)\n    \n    if response.status_code == 200:\n        with open(\"crop_yield.csv\", \"wb\") as f:\n            f.write(response.content)\n        print(\"✅ Dataset downloaded successfully\")\n        return True\n    else:\n        print(f\"❌ Failed to download dataset: {response.status_code}\")\n        return False\n\ndef train_model():\n    \"\"\"Train the crop yield prediction model\"\"\"\n    \n    # Download dataset if not exists\n    if not os.path.exists(\"crop_yield.csv\"):\n        if not download_dataset():\n            return False\n    \n    try:\n        # Load the dataset\n        df = pd.read_csv('crop_yield.csv')\n        print(\"✅ Dataset loaded successfully\")\n        print(f\"Dataset shape: {df.shape}\")\n        \n        # Clean column names\n        df.columns = [\n            'Crop', 'Crop_Year', 'Season', 'State', 'Area', 'Production',\n            'Annual_Rainfall', 'Fertilizer', 'Pesticide', 'Yield'\n        ]\n        \n        print(f\"Columns: {list(df.columns)}\")\n        print(f\"Unique crops: {df['Crop'].unique()}\")\n        \n        # Data preprocessing\n        print(\"\\n📊 Preprocessing data...\")\n        \n        # Drop rows with missing values\n        initial_rows = len(df)\n        df.dropna(inplace=True)\n        print(f\"Dropped {initial_rows - len(df)} rows with missing values\")\n        \n        # Encode categorical features\n        le = LabelEncoder()\n        df['Crop'] = le.fit_transform(df['Crop'])\n        \n        # Prepare features and target\n        # Using the same features as in the original model\n        X = df[['Crop', 'Area', 'Production', 'Annual_Rainfall', 'Fertilizer', 'Pesticide']]\n        y = df['Yield']\n        \n        print(f\"Features shape: {X.shape}\")\n        print(f\"Target shape: {y.shape}\")\n        \n        # Split data\n        X_train, X_test, y_train, y_test = train_test_split(\n            X, y, test_size=0.2, random_state=42\n        )\n        \n        # Train model\n        print(\"\\n🤖 Training CatBoost model...\")\n        model = CatBoostRegressor(\n            random_state=42,\n            verbose=100,\n            iterations=1000,\n            learning_rate=0.1,\n            depth=6\n        )\n        \n        model.fit(X_train, y_train)\n        print(\"✅ Model training completed\")\n        \n        # Evaluate model\n        print(\"\\n📈 Evaluating model...\")\n        y_pred = model.predict(X_test)\n        rmse = np.sqrt(mean_squared_error(y_test, y_pred))\n        r2 = r2_score(y_test, y_pred)\n        \n        print(f\"RMSE: {rmse:.4f}\")\n        print(f\"R² Score: {r2:.4f}\")\n        \n        # Create models directory\n        os.makedirs(\"../backend/ml_models\", exist_ok=True)\n        \n        # Save model and encoder\n        joblib.dump(model, \"../backend/ml_models/yield_model.pkl\")\n        joblib.dump(le, \"../backend/ml_models/label_encoder.pkl\")\n        \n        # Save feature names for reference\n        feature_names = list(X.columns)\n        joblib.dump(feature_names, \"../backend/ml_models/feature_names.pkl\")\n        \n        # Save crop names mapping\n        crop_mapping = dict(zip(le.classes_, le.transform(le.classes_)))\n        joblib.dump(crop_mapping, \"../backend/ml_models/crop_mapping.pkl\")\n        \n        print(\"\\n✅ Model and artifacts saved successfully!\")\n        print(\"Files saved:\")\n        print(\"- ../backend/ml_models/yield_model.pkl\")\n        print(\"- ../backend/ml_models/label_encoder.pkl\")\n        print(\"- ../backend/ml_models/feature_names.pkl\")\n        print(\"- ../backend/ml_models/crop_mapping.pkl\")\n        \n        return True\n        \n    except Exception as e:\n        print(f\"❌ Error training model: {e}\")\n        return False\n\nif __name__ == \"__main__\":\n    print(\"🌾 Crop Yield Prediction Model Setup\")\n    print(\"=\" * 40)\n    \n    success = train_model()\n    \n    if success:\n        print(\"\\n🎉 Setup completed successfully!\")\n        print(\"You can now run the FastAPI backend with the trained model.\")\n    else:\n        print(\"\\n💥 Setup failed. Please check the errors above.\")\n","size_bytes":4536},"styles/globals.css":{"content":"@import 'tailwindcss';\n@import 'tw-animate-css';\n\n@custom-variant dark (&:is(.dark *));\n\n:root {\n  --background: oklch(1 0 0);\n  --foreground: oklch(0.145 0 0);\n  --card: oklch(1 0 0);\n  --card-foreground: oklch(0.145 0 0);\n  --popover: oklch(1 0 0);\n  --popover-foreground: oklch(0.145 0 0);\n  --primary: oklch(0.205 0 0);\n  --primary-foreground: oklch(0.985 0 0);\n  --secondary: oklch(0.97 0 0);\n  --secondary-foreground: oklch(0.205 0 0);\n  --muted: oklch(0.97 0 0);\n  --muted-foreground: oklch(0.556 0 0);\n  --accent: oklch(0.97 0 0);\n  --accent-foreground: oklch(0.205 0 0);\n  --destructive: oklch(0.577 0.245 27.325);\n  --destructive-foreground: oklch(0.577 0.245 27.325);\n  --border: oklch(0.922 0 0);\n  --input: oklch(0.922 0 0);\n  --ring: oklch(0.708 0 0);\n  --chart-1: oklch(0.646 0.222 41.116);\n  --chart-2: oklch(0.6 0.118 184.704);\n  --chart-3: oklch(0.398 0.07 227.392);\n  --chart-4: oklch(0.828 0.189 84.429);\n  --chart-5: oklch(0.769 0.188 70.08);\n  --radius: 0.625rem;\n  --sidebar: oklch(0.985 0 0);\n  --sidebar-foreground: oklch(0.145 0 0);\n  --sidebar-primary: oklch(0.205 0 0);\n  --sidebar-primary-foreground: oklch(0.985 0 0);\n  --sidebar-accent: oklch(0.97 0 0);\n  --sidebar-accent-foreground: oklch(0.205 0 0);\n  --sidebar-border: oklch(0.922 0 0);\n  --sidebar-ring: oklch(0.708 0 0);\n}\n\n.dark {\n  --background: oklch(0.145 0 0);\n  --foreground: oklch(0.985 0 0);\n  --card: oklch(0.145 0 0);\n  --card-foreground: oklch(0.985 0 0);\n  --popover: oklch(0.145 0 0);\n  --popover-foreground: oklch(0.985 0 0);\n  --primary: oklch(0.985 0 0);\n  --primary-foreground: oklch(0.205 0 0);\n  --secondary: oklch(0.269 0 0);\n  --secondary-foreground: oklch(0.985 0 0);\n  --muted: oklch(0.269 0 0);\n  --muted-foreground: oklch(0.708 0 0);\n  --accent: oklch(0.269 0 0);\n  --accent-foreground: oklch(0.985 0 0);\n  --destructive: oklch(0.396 0.141 25.723);\n  --destructive-foreground: oklch(0.637 0.237 25.331);\n  --border: oklch(0.269 0 0);\n  --input: oklch(0.269 0 0);\n  --ring: oklch(0.439 0 0);\n  --chart-1: oklch(0.488 0.243 264.376);\n  --chart-2: oklch(0.696 0.17 162.48);\n  --chart-3: oklch(0.769 0.188 70.08);\n  --chart-4: oklch(0.627 0.265 303.9);\n  --chart-5: oklch(0.645 0.246 16.439);\n  --sidebar: oklch(0.205 0 0);\n  --sidebar-foreground: oklch(0.985 0 0);\n  --sidebar-primary: oklch(0.488 0.243 264.376);\n  --sidebar-primary-foreground: oklch(0.985 0 0);\n  --sidebar-accent: oklch(0.269 0 0);\n  --sidebar-accent-foreground: oklch(0.985 0 0);\n  --sidebar-border: oklch(0.269 0 0);\n  --sidebar-ring: oklch(0.439 0 0);\n}\n\n@theme inline {\n  --font-sans: var(--font-geist-sans);\n  --font-mono: var(--font-geist-mono);\n  --color-background: var(--background);\n  --color-foreground: var(--foreground);\n  --color-card: var(--card);\n  --color-card-foreground: var(--card-foreground);\n  --color-popover: var(--popover);\n  --color-popover-foreground: var(--popover-foreground);\n  --color-primary: var(--primary);\n  --color-primary-foreground: var(--primary-foreground);\n  --color-secondary: var(--secondary);\n  --color-secondary-foreground: var(--secondary-foreground);\n  --color-muted: var(--muted);\n  --color-muted-foreground: var(--muted-foreground);\n  --color-accent: var(--accent);\n  --color-accent-foreground: var(--accent-foreground);\n  --color-destructive: var(--destructive);\n  --color-destructive-foreground: var(--destructive-foreground);\n  --color-border: var(--border);\n  --color-input: var(--input);\n  --color-ring: var(--ring);\n  --color-chart-1: var(--chart-1);\n  --color-chart-2: var(--chart-2);\n  --color-chart-3: var(--chart-3);\n  --color-chart-4: var(--chart-4);\n  --color-chart-5: var(--chart-5);\n  --radius-sm: calc(var(--radius) - 4px);\n  --radius-md: calc(var(--radius) - 2px);\n  --radius-lg: var(--radius);\n  --radius-xl: calc(var(--radius) + 4px);\n  --color-sidebar: var(--sidebar);\n  --color-sidebar-foreground: var(--sidebar-foreground);\n  --color-sidebar-primary: var(--sidebar-primary);\n  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);\n  --color-sidebar-accent: var(--sidebar-accent);\n  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);\n  --color-sidebar-border: var(--sidebar-border);\n  --color-sidebar-ring: var(--sidebar-ring);\n}\n\n@layer base {\n  * {\n    @apply border-border outline-ring/50;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n}\n","size_bytes":4337},"app/dashboard/page.tsx":{"content":"\"use client\";\n\nimport { useEffect, useState, useCallback } from \"react\";\nimport { DashboardLayout } from \"@/components/dashboard/dashboard-layout\";\nimport { StatsCards } from \"@/components/dashboard/stats-cards\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { useAuth } from \"@/contexts/auth-context\";\nimport { apiClient } from \"@/lib/api\";\nimport { useRouter } from \"next/navigation\";\nimport Link from \"next/link\";\nimport { Plus, BarChart3, MapPin } from \"lucide-react\";\n\n// Type definitions\ninterface Farm {\n  id: string;\n  name: string;\n  location?: string;\n}\n\ninterface Prediction {\n  id: string;\n  farm_id: string;\n  created_at: { seconds: number } | Date;\n  outputs?: { predicted_yield_kg_per_ha?: number };\n}\n\nexport default function DashboardPage() {\n  const { user, profile, loading } = useAuth();\n  const [farms, setFarms] = useState<Farm[]>([]);\n  const [predictions, setPredictions] = useState<Prediction[]>([]);\n  const [isLoadingData, setIsLoadingData] = useState(true);\n  const router = useRouter();\n\n  // Load dashboard data\n  const loadDashboardData = useCallback(async () => {\n    setIsLoadingData(true);\n    try {\n      const [farmsResponse, predictionsResponse] = await Promise.all([\n        apiClient.getFarms(),\n        apiClient.getPredictions(),\n      ]);\n      setFarms(farmsResponse.farms || []);\n      setPredictions(predictionsResponse.predictions || []);\n    } catch (error) {\n      console.error(\"Error loading dashboard data:\", error);\n    } finally {\n      setIsLoadingData(false);\n    }\n  }, []);\n\n  // Redirect unauthenticated users and load dashboard\n  useEffect(() => {\n    if (!loading) {\n      if (!user) {\n        router.push(\"/login\");\n      } else {\n        loadDashboardData();\n      }\n    }\n  }, [user, loading, router, loadDashboardData]);\n\n  // Show loader while auth or data is loading\n  if (loading || !user || isLoadingData) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  // Calculate average yield\n  const avgYield =\n    predictions.length > 0\n      ? predictions.reduce(\n          (sum, pred) => sum + (pred.outputs?.predicted_yield_kg_per_ha || 0),\n          0\n        ) / predictions.length\n      : 0;\n\n  // Calculate days since last prediction\n  const lastPredictionDate =\n    predictions.length > 0\n      ? Math.floor(\n          (Date.now() -\n            new Date(\n              \"seconds\" in predictions[0].created_at\n                ? predictions[0].created_at.seconds * 1000\n                : predictions[0].created_at\n            ).getTime()) /\n            (1000 * 60 * 60 * 24)\n        )\n      : 0;\n\n  return (\n    <DashboardLayout>\n      <div className=\"space-y-8\">\n        {/* Header */}\n        <div>\n          <h1 className=\"text-3xl font-bold text-foreground\">\n            Welcome back, {profile?.name}!\n          </h1>\n          <p className=\"text-muted-foreground mt-2\">\n            Here's an overview of your farms and recent predictions.\n          </p>\n        </div>\n\n        {/* Stats Cards */}\n        <StatsCards\n          totalFarms={farms.length}\n          totalPredictions={predictions.length}\n          avgYield={avgYield}\n          lastPrediction={lastPredictionDate.toString()}\n        />\n\n        {/* Quick Actions */}\n        <div className=\"grid gap-6 md:grid-cols-2\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <MapPin className=\"w-5 h-5\" />\n                Farm Management\n              </CardTitle>\n              <CardDescription>\n                Manage your farm locations and view detailed information about each property.\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex gap-2\">\n                <Link href=\"/dashboard/farms\">\n                  <Button variant=\"outline\">View Farms</Button>\n                </Link>\n                <Link href=\"/dashboard/farms\">\n                  <Button>\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Add Farm\n                  </Button>\n                </Link>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <BarChart3 className=\"w-5 h-5\" />\n                Yield Predictions\n              </CardTitle>\n              <CardDescription>\n                Make new predictions or view your prediction history and analytics.\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex gap-2\">\n                <Link href=\"/dashboard/predictions\">\n                  <Button variant=\"outline\">View History</Button>\n                </Link>\n                <Link href=\"/dashboard/predictions/new\">\n                  <Button>\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    New Prediction\n                  </Button>\n                </Link>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Recent Activity */}\n        {predictions.length > 0 && (\n          <Card>\n            <CardHeader>\n              <CardTitle>Recent Predictions</CardTitle>\n              <CardDescription>Your latest yield predictions</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {predictions\n                  .slice(0, 3)\n                  .map((prediction) => (\n                    <div\n                      key={prediction.id}\n                      className=\"flex items-center justify-between p-4 border border-border rounded-lg\"\n                    >\n                      <div>\n                        <p className=\"font-medium\">Farm: {prediction.farm_id}</p>\n                        <p className=\"text-sm text-muted-foreground\">\n                          Predicted:{\" \"}\n                          {prediction.outputs?.predicted_yield_kg_per_ha?.toFixed(1) || 0} kg/ha\n                        </p>\n                      </div>\n                      <div className=\"text-right\">\n                        <p className=\"text-sm text-muted-foreground\">\n                          {new Date(\n                            \"seconds\" in prediction.created_at\n                              ? prediction.created_at.seconds * 1000\n                              : prediction.created_at\n                          ).toLocaleDateString()}\n                        </p>\n                      </div>\n                    </div>\n                  ))}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":7061},"app/login/page.tsx":{"content":"import { AuthLayout } from \"@/components/auth/auth-layout\"\nimport { LoginForm } from \"@/components/auth/login-form\"\n\nexport default function LoginPage() {\n  return (\n    <AuthLayout\n      title=\"Welcome back\"\n      subtitle=\"Sign in to your CropPredict account to access your farm data and predictions\"\n    >\n      <LoginForm />\n    </AuthLayout>\n  )\n}\n","size_bytes":353},"app/register/page.tsx":{"content":"import { AuthLayout } from \"@/components/auth/auth-layout\"\nimport { RegisterForm } from \"@/components/auth/register-form\"\n\nexport default function RegisterPage() {\n  return (\n    <AuthLayout title=\"Create your account\" subtitle=\"Join CropPredict to start making data-driven farming decisions\">\n      <RegisterForm />\n    </AuthLayout>\n  )\n}\n","size_bytes":341},"components/auth/auth-layout.tsx":{"content":"import type { ReactNode } from \"react\"\nimport { Sprout } from \"lucide-react\"\n\ninterface AuthLayoutProps {\n  children: ReactNode\n  title: string\n  subtitle: string\n}\n\nexport function AuthLayout({ children, title, subtitle }: AuthLayoutProps) {\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-accent/20 via-background to-accent/10 flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md\">\n        <div className=\"text-center mb-8\">\n          <div className=\"flex items-center justify-center mb-6\">\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-10 h-10 bg-primary rounded-xl flex items-center justify-center\">\n                <Sprout className=\"w-6 h-6 text-primary-foreground\" />\n              </div>\n              <span className=\"text-2xl font-bold text-foreground\">CropPredict</span>\n            </div>\n          </div>\n          <h1 className=\"text-3xl font-bold text-foreground mb-2 text-balance\">{title}</h1>\n          <p className=\"text-muted-foreground text-balance\">{subtitle}</p>\n        </div>\n\n        <div className=\"bg-card border border-border rounded-2xl p-8 shadow-lg\">{children}</div>\n      </div>\n    </div>\n  )\n}\n","size_bytes":1211},"components/auth/login-form.tsx":{"content":"\"use client\"\n\nimport type React from \"react\"\n\nimport { useState } from \"react\"\nimport { useRouter } from \"next/navigation\"\nimport Link from \"next/link\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { Alert, AlertDescription } from \"@/components/ui/alert\"\nimport { Mail, Lock, Chrome, Loader2, AlertTriangle } from \"lucide-react\"\nimport { useToast } from \"@/hooks/use-toast\"\nimport { useAuth } from \"@/contexts/auth-context\"\n\nexport function LoginForm() {\n  const [email, setEmail] = useState(\"\")\n  const [password, setPassword] = useState(\"\")\n  const [isLoading, setIsLoading] = useState(false)\n  const [isGoogleLoading, setIsGoogleLoading] = useState(false)\n  const router = useRouter()\n  const { toast } = useToast()\n  const { firebaseConfigured } = useAuth()\n\n  const handleEmailLogin = async (e: React.FormEvent) => {\n    e.preventDefault()\n\n    if (!firebaseConfigured) {\n      toast({\n        title: \"Configuration Required\",\n        description: \"Firebase authentication is not configured. Please check your environment variables.\",\n        variant: \"destructive\",\n      })\n      return\n    }\n\n    setIsLoading(true)\n\n    try {\n      const { signInWithEmail } = await import(\"@/lib/auth\")\n      await signInWithEmail(email, password)\n      toast({\n        title: \"Welcome back!\",\n        description: \"You've been successfully signed in.\",\n      })\n      router.push(\"/dashboard\")\n    } catch (error: any) {\n      toast({\n        title: \"Sign in failed\",\n        description: error.message,\n        variant: \"destructive\",\n      })\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const handleGoogleLogin = async () => {\n    if (!firebaseConfigured) {\n      toast({\n        title: \"Configuration Required\",\n        description: \"Firebase authentication is not configured. Please check your environment variables.\",\n        variant: \"destructive\",\n      })\n      return\n    }\n\n    setIsGoogleLoading(true)\n\n    try {\n      const { signInWithGoogle } = await import(\"@/lib/auth\")\n      await signInWithGoogle()\n      toast({\n        title: \"Welcome back!\",\n        description: \"You've been successfully signed in with Google.\",\n      })\n      router.push(\"/dashboard\")\n    } catch (error: any) {\n      toast({\n        title: \"Google sign in failed\",\n        description: error.message,\n        variant: \"destructive\",\n      })\n    } finally {\n      setIsGoogleLoading(false)\n    }\n  }\n\n  if (!firebaseConfigured) {\n    return (\n      <div className=\"space-y-6\">\n        <Alert className=\"border-destructive/20 bg-destructive/5\">\n          <AlertTriangle className=\"h-4 w-4 text-destructive\" />\n          <AlertDescription className=\"text-destructive\">\n            <strong>Firebase Configuration Required</strong>\n            <br />\n            Authentication is currently disabled because Firebase environment variables are not configured.\n            <br />\n            <span className=\"text-sm\">Please set up your Firebase project in Project Settings.</span>\n          </AlertDescription>\n        </Alert>\n\n        <div className=\"text-center\">\n          <Link href=\"/\" className=\"text-primary hover:underline\">\n            ← Back to Home\n          </Link>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <Button\n        onClick={handleGoogleLogin}\n        disabled={isGoogleLoading}\n        variant=\"outline\"\n        className=\"w-full h-12 text-base bg-transparent\"\n      >\n        {isGoogleLoading ? <Loader2 className=\"w-5 h-5 animate-spin mr-2\" /> : <Chrome className=\"w-5 h-5 mr-2\" />}\n        Continue with Google\n      </Button>\n\n      <div className=\"relative\">\n        <div className=\"absolute inset-0 flex items-center\">\n          <Separator className=\"w-full\" />\n        </div>\n        <div className=\"relative flex justify-center text-xs uppercase\">\n          <span className=\"bg-card px-2 text-muted-foreground\">Or continue with email</span>\n        </div>\n      </div>\n\n      <form onSubmit={handleEmailLogin} className=\"space-y-4\">\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"email\">Email</Label>\n          <div className=\"relative\">\n            <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-muted-foreground\" />\n            <Input\n              id=\"email\"\n              type=\"email\"\n              placeholder=\"Enter your email\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              className=\"pl-10 h-12\"\n              required\n            />\n          </div>\n        </div>\n\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"password\">Password</Label>\n          <div className=\"relative\">\n            <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-muted-foreground\" />\n            <Input\n              id=\"password\"\n              type=\"password\"\n              placeholder=\"Enter your password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n              className=\"pl-10 h-12\"\n              required\n            />\n          </div>\n        </div>\n\n        <Button type=\"submit\" disabled={isLoading} className=\"w-full h-12 text-base font-medium\">\n          {isLoading ? <Loader2 className=\"w-5 h-5 animate-spin mr-2\" /> : null}\n          Sign In\n        </Button>\n      </form>\n\n      <div className=\"text-center text-sm\">\n        <span className=\"text-muted-foreground\">{\"Don't have an account? \"}</span>\n        <Link href=\"/register\" className=\"text-primary hover:underline font-medium\">\n          Sign up\n        </Link>\n      </div>\n    </div>\n  )\n}\n","size_bytes":5771},"components/auth/register-form.tsx":{"content":"\"use client\"\n\nimport type React from \"react\"\n\nimport { useState } from \"react\"\nimport { useRouter } from \"next/navigation\"\nimport Link from \"next/link\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { signUpWithEmail, signInWithGoogle } from \"@/lib/auth\"\nimport { User, Mail, Lock, Chrome, Loader2 } from \"lucide-react\"\nimport { useToast } from \"@/hooks/use-toast\"\n\nexport function RegisterForm() {\n  const [name, setName] = useState(\"\")\n  const [email, setEmail] = useState(\"\")\n  const [password, setPassword] = useState(\"\")\n  const [confirmPassword, setConfirmPassword] = useState(\"\")\n  const [isLoading, setIsLoading] = useState(false)\n  const [isGoogleLoading, setIsGoogleLoading] = useState(false)\n  const router = useRouter()\n  const { toast } = useToast()\n\n  const handleEmailRegister = async (e: React.FormEvent) => {\n    e.preventDefault()\n\n    if (password !== confirmPassword) {\n      toast({\n        title: \"Passwords don't match\",\n        description: \"Please make sure your passwords match.\",\n        variant: \"destructive\",\n      })\n      return\n    }\n\n    if (password.length < 6) {\n      toast({\n        title: \"Password too short\",\n        description: \"Password must be at least 6 characters long.\",\n        variant: \"destructive\",\n      })\n      return\n    }\n\n    setIsLoading(true)\n\n    try {\n      await signUpWithEmail(email, password, name)\n      toast({\n        title: \"Account created!\",\n        description: \"Welcome to CropPredict. Your account has been created successfully.\",\n      })\n      router.push(\"/dashboard\")\n    } catch (error: any) {\n      toast({\n        title: \"Registration failed\",\n        description: error.message,\n        variant: \"destructive\",\n      })\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const handleGoogleRegister = async () => {\n    setIsGoogleLoading(true)\n\n    try {\n      await signInWithGoogle()\n      toast({\n        title: \"Account created!\",\n        description: \"Welcome to CropPredict. Your account has been created with Google.\",\n      })\n      router.push(\"/dashboard\")\n    } catch (error: any) {\n      toast({\n        title: \"Google registration failed\",\n        description: error.message,\n        variant: \"destructive\",\n      })\n    } finally {\n      setIsGoogleLoading(false)\n    }\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <Button\n        onClick={handleGoogleRegister}\n        disabled={isGoogleLoading}\n        variant=\"outline\"\n        className=\"w-full h-12 text-base bg-transparent\"\n      >\n        {isGoogleLoading ? <Loader2 className=\"w-5 h-5 animate-spin mr-2\" /> : <Chrome className=\"w-5 h-5 mr-2\" />}\n        Continue with Google\n      </Button>\n\n      <div className=\"relative\">\n        <div className=\"absolute inset-0 flex items-center\">\n          <Separator className=\"w-full\" />\n        </div>\n        <div className=\"relative flex justify-center text-xs uppercase\">\n          <span className=\"bg-card px-2 text-muted-foreground\">Or create account with email</span>\n        </div>\n      </div>\n\n      <form onSubmit={handleEmailRegister} className=\"space-y-4\">\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"name\">Full Name</Label>\n          <div className=\"relative\">\n            <User className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-muted-foreground\" />\n            <Input\n              id=\"name\"\n              type=\"text\"\n              placeholder=\"Enter your full name\"\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n              className=\"pl-10 h-12\"\n              required\n            />\n          </div>\n        </div>\n\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"email\">Email</Label>\n          <div className=\"relative\">\n            <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-muted-foreground\" />\n            <Input\n              id=\"email\"\n              type=\"email\"\n              placeholder=\"Enter your email\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              className=\"pl-10 h-12\"\n              required\n            />\n          </div>\n        </div>\n\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"password\">Password</Label>\n          <div className=\"relative\">\n            <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-muted-foreground\" />\n            <Input\n              id=\"password\"\n              type=\"password\"\n              placeholder=\"Create a password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n              className=\"pl-10 h-12\"\n              required\n            />\n          </div>\n        </div>\n\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"confirmPassword\">Confirm Password</Label>\n          <div className=\"relative\">\n            <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-muted-foreground\" />\n            <Input\n              id=\"confirmPassword\"\n              type=\"password\"\n              placeholder=\"Confirm your password\"\n              value={confirmPassword}\n              onChange={(e) => setConfirmPassword(e.target.value)}\n              className=\"pl-10 h-12\"\n              required\n            />\n          </div>\n        </div>\n\n        <Button type=\"submit\" disabled={isLoading} className=\"w-full h-12 text-base font-medium\">\n          {isLoading ? <Loader2 className=\"w-5 h-5 animate-spin mr-2\" /> : null}\n          Create Account\n        </Button>\n      </form>\n\n      <div className=\"text-center text-sm\">\n        <span className=\"text-muted-foreground\">Already have an account? </span>\n        <Link href=\"/login\" className=\"text-primary hover:underline font-medium\">\n          Sign in\n        </Link>\n      </div>\n    </div>\n  )\n}\n","size_bytes":5993},"components/dashboard/dashboard-layout.tsx":{"content":"\"use client\"\n\nimport type React from \"react\"\n\nimport { useState } from \"react\"\nimport { useRouter } from \"next/navigation\"\nimport Link from \"next/link\"\nimport { Button } from \"@/components/ui/button\"\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\nimport { Sheet, SheetContent, SheetTrigger } from \"@/components/ui/sheet\"\nimport { useAuth } from \"@/contexts/auth-context\"\nimport { signOutUser } from \"@/lib/auth\"\nimport { Sprout, Home, MapPin, BarChart3, Settings, User, LogOut, Menu, Bell } from \"lucide-react\"\nimport { useToast } from \"@/hooks/use-toast\"\n\ninterface DashboardLayoutProps {\n  children: React.ReactNode\n}\n\nconst navigation = [\n  { name: \"Dashboard\", href: \"/dashboard\", icon: Home },\n  { name: \"My Farms\", href: \"/dashboard/farms\", icon: MapPin },\n  { name: \"Predictions\", href: \"/dashboard/predictions\", icon: BarChart3 },\n  { name: \"Profile\", href: \"/dashboard/profile\", icon: User },\n  { name: \"Settings\", href: \"/dashboard/settings\", icon: Settings },\n]\n\nexport function DashboardLayout({ children }: DashboardLayoutProps) {\n  const [sidebarOpen, setSidebarOpen] = useState(false)\n  const { user, profile } = useAuth()\n  const router = useRouter()\n  const { toast } = useToast()\n\n  const handleSignOut = async () => {\n    try {\n      await signOutUser()\n      toast({\n        title: \"Signed out successfully\",\n        description: \"You have been signed out of your account.\",\n      })\n      router.push(\"/\")\n    } catch (error: any) {\n      toast({\n        title: \"Sign out failed\",\n        description: error.message,\n        variant: \"destructive\",\n      })\n    }\n  }\n\n  const userInitials = profile?.name\n    ? profile.name\n        .split(\" \")\n        .map((n) => n[0])\n        .join(\"\")\n        .toUpperCase()\n    : \"U\"\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Mobile sidebar */}\n      <Sheet open={sidebarOpen} onOpenChange={setSidebarOpen}>\n        <SheetContent side=\"left\" className=\"w-64 p-0\">\n          <div className=\"flex h-full flex-col\">\n            <div className=\"flex h-16 items-center gap-2 px-6 border-b border-border\">\n              <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n                <Sprout className=\"w-5 h-5 text-primary-foreground\" />\n              </div>\n              <span className=\"text-lg font-semibold\">CropPredict</span>\n            </div>\n            <nav className=\"flex-1 space-y-1 px-3 py-4\">\n              {navigation.map((item) => (\n                <Link\n                  key={item.name}\n                  href={item.href}\n                  className=\"flex items-center gap-3 rounded-lg px-3 py-2 text-sm font-medium text-muted-foreground hover:bg-accent hover:text-accent-foreground transition-colors\"\n                  onClick={() => setSidebarOpen(false)}\n                >\n                  <item.icon className=\"w-5 h-5\" />\n                  {item.name}\n                </Link>\n              ))}\n            </nav>\n          </div>\n        </SheetContent>\n      </Sheet>\n\n      {/* Desktop sidebar */}\n      <div className=\"hidden lg:fixed lg:inset-y-0 lg:z-50 lg:flex lg:w-64 lg:flex-col\">\n        <div className=\"flex grow flex-col gap-y-5 overflow-y-auto border-r border-border bg-card px-6\">\n          <div className=\"flex h-16 shrink-0 items-center gap-2\">\n            <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n              <Sprout className=\"w-5 h-5 text-primary-foreground\" />\n            </div>\n            <span className=\"text-lg font-semibold\">CropPredict</span>\n          </div>\n          <nav className=\"flex flex-1 flex-col\">\n            <ul role=\"list\" className=\"flex flex-1 flex-col gap-y-7\">\n              <li>\n                <ul role=\"list\" className=\"-mx-2 space-y-1\">\n                  {navigation.map((item) => (\n                    <li key={item.name}>\n                      <Link\n                        href={item.href}\n                        className=\"flex items-center gap-x-3 rounded-lg p-2 text-sm font-medium text-muted-foreground hover:bg-accent hover:text-accent-foreground transition-colors\"\n                      >\n                        <item.icon className=\"h-5 w-5 shrink-0\" />\n                        {item.name}\n                      </Link>\n                    </li>\n                  ))}\n                </ul>\n              </li>\n            </ul>\n          </nav>\n        </div>\n      </div>\n\n      {/* Main content */}\n      <div className=\"lg:pl-64\">\n        {/* Top bar */}\n        <div className=\"sticky top-0 z-40 flex h-16 shrink-0 items-center gap-x-4 border-b border-border bg-card/95 backdrop-blur supports-[backdrop-filter]:bg-card/60 px-4 shadow-sm sm:gap-x-6 sm:px-6 lg:px-8\">\n          <SheetTrigger asChild>\n            <Button variant=\"ghost\" size=\"sm\" className=\"lg:hidden\">\n              <Menu className=\"h-5 w-5\" />\n              <span className=\"sr-only\">Open sidebar</span>\n            </Button>\n          </SheetTrigger>\n\n          <div className=\"flex flex-1 gap-x-4 self-stretch lg:gap-x-6\">\n            <div className=\"flex flex-1\"></div>\n            <div className=\"flex items-center gap-x-4 lg:gap-x-6\">\n              <Button variant=\"ghost\" size=\"sm\">\n                <Bell className=\"h-5 w-5\" />\n                <span className=\"sr-only\">View notifications</span>\n              </Button>\n\n              <div className=\"hidden lg:block lg:h-6 lg:w-px lg:bg-border\" />\n\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button variant=\"ghost\" className=\"relative h-8 w-8 rounded-full\">\n                    <Avatar className=\"h-8 w-8\">\n                      <AvatarImage src={user?.photoURL || \"\"} alt={profile?.name || \"\"} />\n                      <AvatarFallback className=\"text-xs\">{userInitials}</AvatarFallback>\n                    </Avatar>\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent className=\"w-56\" align=\"end\" forceMount>\n                  <DropdownMenuLabel className=\"font-normal\">\n                    <div className=\"flex flex-col space-y-1\">\n                      <p className=\"text-sm font-medium leading-none\">{profile?.name}</p>\n                      <p className=\"text-xs leading-none text-muted-foreground\">{profile?.email}</p>\n                    </div>\n                  </DropdownMenuLabel>\n                  <DropdownMenuSeparator />\n                  <DropdownMenuItem asChild>\n                    <Link href=\"/dashboard/profile\">\n                      <User className=\"mr-2 h-4 w-4\" />\n                      <span>Profile</span>\n                    </Link>\n                  </DropdownMenuItem>\n                  <DropdownMenuItem asChild>\n                    <Link href=\"/dashboard/settings\">\n                      <Settings className=\"mr-2 h-4 w-4\" />\n                      <span>Settings</span>\n                    </Link>\n                  </DropdownMenuItem>\n                  <DropdownMenuSeparator />\n                  <DropdownMenuItem onClick={handleSignOut}>\n                    <LogOut className=\"mr-2 h-4 w-4\" />\n                    <span>Sign out</span>\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            </div>\n          </div>\n        </div>\n\n        {/* Page content */}\n        <main className=\"py-8\">\n          <div className=\"px-4 sm:px-6 lg:px-8\">{children}</div>\n        </main>\n      </div>\n    </div>\n  )\n}\n","size_bytes":7683},"components/dashboard/stats-cards.tsx":{"content":"\"use client\"\n\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { MapPin, BarChart3, TrendingUp, Calendar } from \"lucide-react\"\n\ninterface StatsCardsProps {\n  totalFarms: number\n  totalPredictions: number\n  avgYield: number\n  lastPrediction: string\n}\n\nexport function StatsCards({ totalFarms, totalPredictions, avgYield, lastPrediction }: StatsCardsProps) {\n  return (\n    <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n      <Card>\n        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n          <CardTitle className=\"text-sm font-medium\">Total Farms</CardTitle>\n          <MapPin className=\"h-4 w-4 text-muted-foreground\" />\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-2xl font-bold\">{totalFarms}</div>\n          <p className=\"text-xs text-muted-foreground\">Active farm locations</p>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n          <CardTitle className=\"text-sm font-medium\">Predictions Made</CardTitle>\n          <BarChart3 className=\"h-4 w-4 text-muted-foreground\" />\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-2xl font-bold\">{totalPredictions}</div>\n          <p className=\"text-xs text-muted-foreground\">Total yield predictions</p>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n          <CardTitle className=\"text-sm font-medium\">Avg. Predicted Yield</CardTitle>\n          <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-2xl font-bold\">{avgYield.toFixed(1)}</div>\n          <p className=\"text-xs text-muted-foreground\">kg/hectare</p>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n          <CardTitle className=\"text-sm font-medium\">Last Prediction</CardTitle>\n          <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-2xl font-bold\">{lastPrediction}</div>\n          <p className=\"text-xs text-muted-foreground\">Days ago</p>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n","size_bytes":2397},"components/farms/add-farm-dialog.tsx":{"content":"\"use client\"\n\nimport type React from \"react\"\n\nimport { useState } from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport { Plus, Loader2, MapPin } from \"lucide-react\"\nimport { apiClient } from \"@/lib/api\"\nimport { useToast } from \"@/hooks/use-toast\"\n\ninterface AddFarmDialogProps {\n  onFarmAdded: () => void\n}\n\nexport function AddFarmDialog({ onFarmAdded }: AddFarmDialogProps) {\n  const [open, setOpen] = useState(false)\n  const [isLoading, setIsLoading] = useState(false)\n  const [isGettingLocation, setIsGettingLocation] = useState(false)\n  const [formData, setFormData] = useState({\n    name: \"\",\n    latitude: \"\",\n    longitude: \"\",\n    soil_type: \"\",\n    area_ha: \"\",\n  })\n  const { toast } = useToast()\n\n  const handleGetLocation = () => {\n    if (!navigator.geolocation) {\n      toast({\n        title: \"Geolocation not supported\",\n        description: \"Your browser doesn't support geolocation.\",\n        variant: \"destructive\",\n      })\n      return\n    }\n\n    setIsGettingLocation(true)\n    navigator.geolocation.getCurrentPosition(\n      (position) => {\n        setFormData((prev) => ({\n          ...prev,\n          latitude: position.coords.latitude.toString(),\n          longitude: position.coords.longitude.toString(),\n        }))\n        setIsGettingLocation(false)\n        toast({\n          title: \"Location obtained\",\n          description: \"Your current location has been set for the farm.\",\n        })\n      },\n      (error) => {\n        setIsGettingLocation(false)\n        toast({\n          title: \"Location error\",\n          description: \"Unable to get your current location. Please enter coordinates manually.\",\n          variant: \"destructive\",\n        })\n      },\n    )\n  }\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setIsLoading(true)\n\n    try {\n      await apiClient.addFarm({\n        name: formData.name,\n        location: {\n          lat: Number.parseFloat(formData.latitude),\n          lon: Number.parseFloat(formData.longitude),\n        },\n        soil_type: formData.soil_type,\n        area_ha: Number.parseFloat(formData.area_ha),\n      })\n\n      toast({\n        title: \"Farm added successfully\",\n        description: `${formData.name} has been added to your farms.`,\n      })\n\n      setFormData({\n        name: \"\",\n        latitude: \"\",\n        longitude: \"\",\n        soil_type: \"\",\n        area_ha: \"\",\n      })\n      setOpen(false)\n      onFarmAdded()\n    } catch (error: any) {\n      toast({\n        title: \"Failed to add farm\",\n        description: error.message,\n        variant: \"destructive\",\n      })\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  return (\n    <Dialog open={open} onOpenChange={setOpen}>\n      <DialogTrigger asChild>\n        <Button>\n          <Plus className=\"w-4 h-4 mr-2\" />\n          Add Farm\n        </Button>\n      </DialogTrigger>\n      <DialogContent className=\"sm:max-w-[425px]\">\n        <DialogHeader>\n          <DialogTitle>Add New Farm</DialogTitle>\n          <DialogDescription>Add a new farm location to start making yield predictions.</DialogDescription>\n        </DialogHeader>\n        <form onSubmit={handleSubmit}>\n          <div className=\"grid gap-4 py-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"name\">Farm Name</Label>\n              <Input\n                id=\"name\"\n                placeholder=\"e.g., North Field\"\n                value={formData.name}\n                onChange={(e) => setFormData((prev) => ({ ...prev, name: e.target.value }))}\n                required\n              />\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"latitude\">Latitude</Label>\n                <Input\n                  id=\"latitude\"\n                  type=\"number\"\n                  step=\"any\"\n                  placeholder=\"e.g., 40.7128\"\n                  value={formData.latitude}\n                  onChange={(e) => setFormData((prev) => ({ ...prev, latitude: e.target.value }))}\n                  required\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"longitude\">Longitude</Label>\n                <Input\n                  id=\"longitude\"\n                  type=\"number\"\n                  step=\"any\"\n                  placeholder=\"e.g., -74.0060\"\n                  value={formData.longitude}\n                  onChange={(e) => setFormData((prev) => ({ ...prev, longitude: e.target.value }))}\n                  required\n                />\n              </div>\n            </div>\n\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={handleGetLocation}\n              disabled={isGettingLocation}\n              className=\"w-full bg-transparent\"\n            >\n              {isGettingLocation ? (\n                <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n              ) : (\n                <MapPin className=\"w-4 h-4 mr-2\" />\n              )}\n              Use Current Location\n            </Button>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"soil_type\">Soil Type</Label>\n              <Select\n                value={formData.soil_type}\n                onValueChange={(value) => setFormData((prev) => ({ ...prev, soil_type: value }))}\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select soil type\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"clay\">Clay</SelectItem>\n                  <SelectItem value=\"loam\">Loam</SelectItem>\n                  <SelectItem value=\"sand\">Sand</SelectItem>\n                  <SelectItem value=\"silt\">Silt</SelectItem>\n                  <SelectItem value=\"peat\">Peat</SelectItem>\n                  <SelectItem value=\"chalk\">Chalk</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"area_ha\">Area (Hectares)</Label>\n              <Input\n                id=\"area_ha\"\n                type=\"number\"\n                step=\"0.1\"\n                placeholder=\"e.g., 2.5\"\n                value={formData.area_ha}\n                onChange={(e) => setFormData((prev) => ({ ...prev, area_ha: e.target.value }))}\n                required\n              />\n            </div>\n          </div>\n          <DialogFooter>\n            <Button type=\"button\" variant=\"outline\" onClick={() => setOpen(false)}>\n              Cancel\n            </Button>\n            <Button type=\"submit\" disabled={isLoading}>\n              {isLoading ? <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" /> : null}\n              Add Farm\n            </Button>\n          </DialogFooter>\n        </form>\n      </DialogContent>\n    </Dialog>\n  )\n}\n","size_bytes":7202},"components/farms/farm-card.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { MapPin, Ruler } from \"lucide-react\"\n\ninterface Farm {\n  farm_id: string\n  name: string\n  location: { lat: number; lon: number }\n  soil_type: string\n  area_ha: number\n  created_at: any\n}\n\ninterface FarmCardProps {\n  farm: Farm\n}\n\nexport function FarmCard({ farm }: FarmCardProps) {\n  return (\n    <Card className=\"hover:shadow-md transition-shadow\">\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-lg\">{farm.name}</CardTitle>\n          <Badge variant=\"secondary\" className=\"capitalize\">\n            {farm.soil_type}\n          </Badge>\n        </div>\n      </CardHeader>\n      <CardContent className=\"space-y-3\">\n        <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n          <MapPin className=\"w-4 h-4\" />\n          <span>\n            {farm.location.lat.toFixed(4)}, {farm.location.lon.toFixed(4)}\n          </span>\n        </div>\n        <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n          <Ruler className=\"w-4 h-4\" />\n          <span>{farm.area_ha} hectares</span>\n        </div>\n      </CardContent>\n    </Card>\n  )\n}\n","size_bytes":1298},"components/predictions/prediction-form.tsx":{"content":"\"use client\"\n\nimport type React from \"react\"\n\nimport { useState, useEffect } from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { apiClient } from \"@/lib/api\"\nimport { useToast } from \"@/hooks/use-toast\"\nimport { Loader2, Sprout, MapPin, Thermometer, Droplets, Beaker } from \"lucide-react\"\n\ninterface PredictionFormProps {\n  onPredictionComplete: (result: any) => void\n}\n\nconst cropTypes = [\n  \"Wheat\",\n  \"Rice\",\n  \"Maize\",\n  \"Barley\",\n  \"Soybean\",\n  \"Cotton\",\n  \"Sugarcane\",\n  \"Potato\",\n  \"Tomato\",\n  \"Onion\",\n  \"Groundnut\",\n  \"Sunflower\",\n]\n\nexport function PredictionForm({ onPredictionComplete }: PredictionFormProps) {\n  const [farms, setFarms] = useState([])\n  const [isLoading, setIsLoading] = useState(false)\n  const [isLoadingFarms, setIsLoadingFarms] = useState(true)\n  const [formData, setFormData] = useState({\n    farm_id: \"\",\n    crop: \"\",\n    area: \"\",\n    production: \"\",\n    rainfall: \"\",\n    fertilizer: \"\",\n    pesticide: \"\",\n    sowing_date: \"\",\n  })\n  const { toast } = useToast()\n\n  useEffect(() => {\n    loadFarms()\n  }, [])\n\n  const loadFarms = async () => {\n    try {\n      const response = await apiClient.getFarms()\n      setFarms(response.farms)\n    } catch (error) {\n      console.error(\"Error loading farms:\", error)\n      toast({\n        title: \"Error loading farms\",\n        description: \"Please try refreshing the page.\",\n        variant: \"destructive\",\n      })\n    } finally {\n      setIsLoadingFarms(false)\n    }\n  }\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setIsLoading(true)\n\n    try {\n      const result = await apiClient.predictYield({\n        farm_id: formData.farm_id,\n        crop: formData.crop,\n        area: Number.parseFloat(formData.area),\n        production: Number.parseFloat(formData.production),\n        rainfall: formData.rainfall ? Number.parseFloat(formData.rainfall) : undefined,\n        fertilizer: Number.parseFloat(formData.fertilizer),\n        pesticide: Number.parseFloat(formData.pesticide),\n        sowing_date: formData.sowing_date,\n      })\n\n      toast({\n        title: \"Prediction completed!\",\n        description: \"Your crop yield prediction has been generated successfully.\",\n      })\n\n      onPredictionComplete(result)\n    } catch (error: any) {\n      toast({\n        title: \"Prediction failed\",\n        description: error.message,\n        variant: \"destructive\",\n      })\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  if (isLoadingFarms) {\n    return (\n      <Card>\n        <CardContent className=\"flex items-center justify-center py-12\">\n          <Loader2 className=\"w-8 h-8 animate-spin\" />\n        </CardContent>\n      </Card>\n    )\n  }\n\n  if (farms.length === 0) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>No Farms Available</CardTitle>\n          <CardDescription>You need to add at least one farm before making predictions.</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Button onClick={() => (window.location.href = \"/dashboard/farms\")}>Add Farm</Button>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Sprout className=\"w-5 h-5\" />\n          Crop Yield Prediction\n        </CardTitle>\n        <CardDescription>Enter your crop and farm details to get an AI-powered yield prediction.</CardDescription>\n      </CardHeader>\n      <CardContent>\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          {/* Farm Selection */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"farm\">Select Farm</Label>\n            <Select\n              value={formData.farm_id}\n              onValueChange={(value) => setFormData((prev) => ({ ...prev, farm_id: value }))}\n            >\n              <SelectTrigger>\n                <SelectValue placeholder=\"Choose a farm\" />\n              </SelectTrigger>\n              <SelectContent>\n                {farms.map((farm: any) => (\n                  <SelectItem key={farm.farm_id} value={farm.farm_id}>\n                    <div className=\"flex items-center gap-2\">\n                      <MapPin className=\"w-4 h-4\" />\n                      {farm.name} ({farm.area_ha} ha)\n                    </div>\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          <Separator />\n\n          {/* Crop Information */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-medium\">Crop Information</h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"crop\">Crop Type</Label>\n                <Select\n                  value={formData.crop}\n                  onValueChange={(value) => setFormData((prev) => ({ ...prev, crop: value }))}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select crop type\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {cropTypes.map((crop) => (\n                      <SelectItem key={crop} value={crop}>\n                        {crop}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"sowing_date\">Sowing Date</Label>\n                <Input\n                  id=\"sowing_date\"\n                  type=\"date\"\n                  value={formData.sowing_date}\n                  onChange={(e) => setFormData((prev) => ({ ...prev, sowing_date: e.target.value }))}\n                  required\n                />\n              </div>\n            </div>\n          </div>\n\n          <Separator />\n\n          {/* Farm Details */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-medium\">Farm Details</h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"area\">Cultivation Area (hectares)</Label>\n                <Input\n                  id=\"area\"\n                  type=\"number\"\n                  step=\"0.1\"\n                  placeholder=\"e.g., 2.5\"\n                  value={formData.area}\n                  onChange={(e) => setFormData((prev) => ({ ...prev, area: e.target.value }))}\n                  required\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"production\">Expected Production (metric tons)</Label>\n                <Input\n                  id=\"production\"\n                  type=\"number\"\n                  step=\"0.1\"\n                  placeholder=\"e.g., 5.2\"\n                  value={formData.production}\n                  onChange={(e) => setFormData((prev) => ({ ...prev, production: e.target.value }))}\n                  required\n                />\n              </div>\n            </div>\n          </div>\n\n          <Separator />\n\n          {/* Environmental Conditions */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-medium flex items-center gap-2\">\n              <Thermometer className=\"w-5 h-5\" />\n              Environmental Conditions\n            </h3>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"rainfall\">Annual Rainfall (mm/year)</Label>\n              <div className=\"relative\">\n                <Droplets className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n                <Input\n                  id=\"rainfall\"\n                  type=\"number\"\n                  step=\"0.1\"\n                  placeholder=\"Leave empty to use weather data\"\n                  value={formData.rainfall}\n                  onChange={(e) => setFormData((prev) => ({ ...prev, rainfall: e.target.value }))}\n                  className=\"pl-10\"\n                />\n              </div>\n              <p className=\"text-xs text-muted-foreground\">\n                If left empty, we'll use current weather data for your farm location.\n              </p>\n            </div>\n          </div>\n\n          <Separator />\n\n          {/* Agricultural Inputs */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-medium flex items-center gap-2\">\n              <Beaker className=\"w-5 h-5\" />\n              Agricultural Inputs\n            </h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"fertilizer\">Fertilizer Usage (kg)</Label>\n                <Input\n                  id=\"fertilizer\"\n                  type=\"number\"\n                  step=\"0.1\"\n                  placeholder=\"e.g., 150.5\"\n                  value={formData.fertilizer}\n                  onChange={(e) => setFormData((prev) => ({ ...prev, fertilizer: e.target.value }))}\n                  required\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"pesticide\">Pesticide Usage (kg)</Label>\n                <Input\n                  id=\"pesticide\"\n                  type=\"number\"\n                  step=\"0.1\"\n                  placeholder=\"e.g., 25.0\"\n                  value={formData.pesticide}\n                  onChange={(e) => setFormData((prev) => ({ ...prev, pesticide: e.target.value }))}\n                  required\n                />\n              </div>\n            </div>\n          </div>\n\n          <Button type=\"submit\" disabled={isLoading} className=\"w-full\">\n            {isLoading ? <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" /> : null}\n            Generate Prediction\n          </Button>\n        </form>\n      </CardContent>\n    </Card>\n  )\n}\n","size_bytes":10164},"components/predictions/prediction-history.tsx":{"content":"\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Button } from \"@/components/ui/button\"\nimport { apiClient } from \"@/lib/api\"\nimport { Calendar, TrendingUp, MapPin, Loader2 } from \"lucide-react\"\nimport { format } from \"date-fns\"\n\nexport function PredictionHistory() {\n  const [predictions, setPredictions] = useState([])\n  const [isLoading, setIsLoading] = useState(true)\n\n  useEffect(() => {\n    loadPredictions()\n  }, [])\n\n  const loadPredictions = async () => {\n    try {\n      const response = await apiClient.getPredictions()\n      setPredictions(response.predictions)\n    } catch (error) {\n      console.error(\"Error loading predictions:\", error)\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardContent className=\"flex items-center justify-center py-12\">\n          <Loader2 className=\"w-8 h-8 animate-spin\" />\n        </CardContent>\n      </Card>\n    )\n  }\n\n  if (predictions.length === 0) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>No Predictions Yet</CardTitle>\n          <CardDescription>You haven't made any yield predictions yet.</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Button onClick={() => (window.location.href = \"/dashboard/predictions/new\")}>Make First Prediction</Button>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      {predictions.map((prediction: any, index: number) => (\n        <Card key={index}>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle className=\"flex items-center gap-2\">\n                <MapPin className=\"w-4 h-4\" />\n                Farm: {prediction.farm_id}\n              </CardTitle>\n              <Badge variant={prediction.status === \"complete\" ? \"default\" : \"secondary\"}>{prediction.status}</Badge>\n            </div>\n            <CardDescription className=\"flex items-center gap-2\">\n              <Calendar className=\"w-4 h-4\" />\n              {format(new Date(prediction.created_at.seconds * 1000), \"PPP\")}\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            {prediction.status === \"complete\" && prediction.outputs ? (\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <div className=\"text-2xl font-bold text-primary\">\n                      {prediction.outputs.predicted_yield_kg_per_ha} kg/ha\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">\n                      Range: {prediction.outputs.confidence_interval?.lower?.toFixed(1)} -{\" \"}\n                      {prediction.outputs.confidence_interval?.upper?.toFixed(1)} kg/ha\n                    </div>\n                  </div>\n                  <TrendingUp className=\"w-8 h-8 text-muted-foreground\" />\n                </div>\n\n                {prediction.inputs && (\n                  <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n                    <div>\n                      <div className=\"font-medium\">Crop</div>\n                      <div className=\"text-muted-foreground\">{prediction.inputs.crop}</div>\n                    </div>\n                    <div>\n                      <div className=\"font-medium\">Area</div>\n                      <div className=\"text-muted-foreground\">{prediction.inputs.area} ha</div>\n                    </div>\n                    <div>\n                      <div className=\"font-medium\">Fertilizer</div>\n                      <div className=\"text-muted-foreground\">{prediction.inputs.fertilizer} kg</div>\n                    </div>\n                    <div>\n                      <div className=\"font-medium\">Pesticide</div>\n                      <div className=\"text-muted-foreground\">{prediction.inputs.pesticide} kg</div>\n                    </div>\n                  </div>\n                )}\n              </div>\n            ) : prediction.status === \"error\" ? (\n              <div className=\"text-destructive\">\n                <p>Prediction failed: {prediction.error}</p>\n              </div>\n            ) : (\n              <div className=\"flex items-center gap-2\">\n                <Loader2 className=\"w-4 h-4 animate-spin\" />\n                <span>Processing prediction...</span>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      ))}\n    </div>\n  )\n}\n","size_bytes":4626},"components/predictions/prediction-result.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Progress } from \"@/components/ui/progress\"\nimport { TrendingUp, Target, BarChart3, Calendar } from \"lucide-react\"\n\ninterface PredictionResultProps {\n  result: {\n    request_id: string\n    farm_id: string\n    predicted_yield_kg_per_ha: number\n    confidence_interval: {\n      lower: number\n      upper: number\n    }\n    model_version: string\n    feature_importance?: Array<{\n      feature: string\n      importance: number\n    }>\n    weather_data?: {\n      rainfall: number\n      temperature?: number\n      humidity?: number\n    }\n  }\n}\n\nexport function PredictionResult({ result }: PredictionResultProps) {\n  const confidenceRange = result.confidence_interval.upper - result.confidence_interval.lower\n  const confidencePercentage =\n    ((result.predicted_yield_kg_per_ha - result.confidence_interval.lower) / confidenceRange) * 100\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Main Result */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Target className=\"w-5 h-5\" />\n            Prediction Result\n          </CardTitle>\n          <CardDescription>AI-powered crop yield prediction for your farm</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-center space-y-4\">\n            <div>\n              <div className=\"text-4xl font-bold text-primary\">{result.predicted_yield_kg_per_ha}</div>\n              <div className=\"text-lg text-muted-foreground\">kg per hectare</div>\n            </div>\n            <div className=\"flex items-center justify-center gap-4 text-sm text-muted-foreground\">\n              <span>\n                Range: {result.confidence_interval.lower.toFixed(1)} - {result.confidence_interval.upper.toFixed(1)}{\" \"}\n                kg/ha\n              </span>\n              <Badge variant=\"secondary\">{result.model_version}</Badge>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Confidence Interval */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <BarChart3 className=\"w-5 h-5\" />\n            Confidence Range\n          </CardTitle>\n          <CardDescription>Prediction confidence interval</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <div className=\"flex justify-between text-sm\">\n              <span>Lower bound: {result.confidence_interval.lower.toFixed(1)} kg/ha</span>\n              <span>Upper bound: {result.confidence_interval.upper.toFixed(1)} kg/ha</span>\n            </div>\n            <Progress value={confidencePercentage} className=\"h-2\" />\n            <p className=\"text-xs text-muted-foreground text-center\">\n              The predicted yield falls within this confidence range based on the model's analysis.\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Feature Importance */}\n      {result.feature_importance && result.feature_importance.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <TrendingUp className=\"w-5 h-5\" />\n              Key Factors\n            </CardTitle>\n            <CardDescription>Most important factors affecting your yield prediction</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {result.feature_importance.slice(0, 5).map((factor, index) => (\n                <div key={index} className=\"flex items-center justify-between\">\n                  <span className=\"text-sm font-medium capitalize\">{factor.feature.replace(\"_\", \" \")}</span>\n                  <div className=\"flex items-center gap-2\">\n                    <Progress value={factor.importance * 100} className=\"w-20 h-2\" />\n                    <span className=\"text-xs text-muted-foreground w-12\">{(factor.importance * 100).toFixed(0)}%</span>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Weather Data */}\n      {result.weather_data && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Calendar className=\"w-5 h-5\" />\n              Weather Conditions\n            </CardTitle>\n            <CardDescription>Environmental data used in the prediction</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold\">{result.weather_data.rainfall}</div>\n                <div className=\"text-sm text-muted-foreground\">mm/year rainfall</div>\n              </div>\n              {result.weather_data.temperature && (\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold\">{result.weather_data.temperature}°</div>\n                  <div className=\"text-sm text-muted-foreground\">Temperature (°C)</div>\n                </div>\n              )}\n              {result.weather_data.humidity && (\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold\">{result.weather_data.humidity}%</div>\n                  <div className=\"text-sm text-muted-foreground\">Humidity</div>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  )\n}\n","size_bytes":5629},"components/ui/accordion.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as AccordionPrimitive from '@radix-ui/react-accordion'\nimport { ChevronDownIcon } from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\n\nfunction Accordion({\n  ...props\n}: React.ComponentProps<typeof AccordionPrimitive.Root>) {\n  return <AccordionPrimitive.Root data-slot=\"accordion\" {...props} />\n}\n\nfunction AccordionItem({\n  className,\n  ...props\n}: React.ComponentProps<typeof AccordionPrimitive.Item>) {\n  return (\n    <AccordionPrimitive.Item\n      data-slot=\"accordion-item\"\n      className={cn('border-b last:border-b-0', className)}\n      {...props}\n    />\n  )\n}\n\nfunction AccordionTrigger({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof AccordionPrimitive.Trigger>) {\n  return (\n    <AccordionPrimitive.Header className=\"flex\">\n      <AccordionPrimitive.Trigger\n        data-slot=\"accordion-trigger\"\n        className={cn(\n          'focus-visible:border-ring focus-visible:ring-ring/50 flex flex-1 items-start justify-between gap-4 rounded-md py-4 text-left text-sm font-medium transition-all outline-none hover:underline focus-visible:ring-[3px] disabled:pointer-events-none disabled:opacity-50 [&[data-state=open]>svg]:rotate-180',\n          className,\n        )}\n        {...props}\n      >\n        {children}\n        <ChevronDownIcon className=\"text-muted-foreground pointer-events-none size-4 shrink-0 translate-y-0.5 transition-transform duration-200\" />\n      </AccordionPrimitive.Trigger>\n    </AccordionPrimitive.Header>\n  )\n}\n\nfunction AccordionContent({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof AccordionPrimitive.Content>) {\n  return (\n    <AccordionPrimitive.Content\n      data-slot=\"accordion-content\"\n      className=\"data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down overflow-hidden text-sm\"\n      {...props}\n    >\n      <div className={cn('pt-0 pb-4', className)}>{children}</div>\n    </AccordionPrimitive.Content>\n  )\n}\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":2054},"components/ui/alert-dialog.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as AlertDialogPrimitive from '@radix-ui/react-alert-dialog'\n\nimport { cn } from '@/lib/utils'\nimport { buttonVariants } from '@/components/ui/button'\n\nfunction AlertDialog({\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Root>) {\n  return <AlertDialogPrimitive.Root data-slot=\"alert-dialog\" {...props} />\n}\n\nfunction AlertDialogTrigger({\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Trigger>) {\n  return (\n    <AlertDialogPrimitive.Trigger data-slot=\"alert-dialog-trigger\" {...props} />\n  )\n}\n\nfunction AlertDialogPortal({\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Portal>) {\n  return (\n    <AlertDialogPrimitive.Portal data-slot=\"alert-dialog-portal\" {...props} />\n  )\n}\n\nfunction AlertDialogOverlay({\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Overlay>) {\n  return (\n    <AlertDialogPrimitive.Overlay\n      data-slot=\"alert-dialog-overlay\"\n      className={cn(\n        'data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDialogContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Content>) {\n  return (\n    <AlertDialogPortal>\n      <AlertDialogOverlay />\n      <AlertDialogPrimitive.Content\n        data-slot=\"alert-dialog-content\"\n        className={cn(\n          'bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg',\n          className,\n        )}\n        {...props}\n      />\n    </AlertDialogPortal>\n  )\n}\n\nfunction AlertDialogHeader({\n  className,\n  ...props\n}: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"alert-dialog-header\"\n      className={cn('flex flex-col gap-2 text-center sm:text-left', className)}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDialogFooter({\n  className,\n  ...props\n}: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"alert-dialog-footer\"\n      className={cn(\n        'flex flex-col-reverse gap-2 sm:flex-row sm:justify-end',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDialogTitle({\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Title>) {\n  return (\n    <AlertDialogPrimitive.Title\n      data-slot=\"alert-dialog-title\"\n      className={cn('text-lg font-semibold', className)}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDialogDescription({\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Description>) {\n  return (\n    <AlertDialogPrimitive.Description\n      data-slot=\"alert-dialog-description\"\n      className={cn('text-muted-foreground text-sm', className)}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDialogAction({\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Action>) {\n  return (\n    <AlertDialogPrimitive.Action\n      className={cn(buttonVariants(), className)}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDialogCancel({\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Cancel>) {\n  return (\n    <AlertDialogPrimitive.Cancel\n      className={cn(buttonVariants({ variant: 'outline' }), className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":3867},"components/ui/alert.tsx":{"content":"import * as React from 'react'\nimport { cva, type VariantProps } from 'class-variance-authority'\n\nimport { cn } from '@/lib/utils'\n\nconst alertVariants = cva(\n  'relative w-full rounded-lg border px-4 py-3 text-sm grid has-[>svg]:grid-cols-[calc(var(--spacing)*4)_1fr] grid-cols-[0_1fr] has-[>svg]:gap-x-3 gap-y-0.5 items-start [&>svg]:size-4 [&>svg]:translate-y-0.5 [&>svg]:text-current',\n  {\n    variants: {\n      variant: {\n        default: 'bg-card text-card-foreground',\n        destructive:\n          'text-destructive bg-card [&>svg]:text-current *:data-[slot=alert-description]:text-destructive/90',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n    },\n  },\n)\n\nfunction Alert({\n  className,\n  variant,\n  ...props\n}: React.ComponentProps<'div'> & VariantProps<typeof alertVariants>) {\n  return (\n    <div\n      data-slot=\"alert\"\n      role=\"alert\"\n      className={cn(alertVariants({ variant }), className)}\n      {...props}\n    />\n  )\n}\n\nfunction AlertTitle({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"alert-title\"\n      className={cn(\n        'col-start-2 line-clamp-1 min-h-4 font-medium tracking-tight',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDescription({\n  className,\n  ...props\n}: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"alert-description\"\n      className={cn(\n        'text-muted-foreground col-start-2 grid justify-items-start gap-1 text-sm [&_p]:leading-relaxed',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1617},"components/ui/aspect-ratio.tsx":{"content":"'use client'\n\nimport * as AspectRatioPrimitive from '@radix-ui/react-aspect-ratio'\n\nfunction AspectRatio({\n  ...props\n}: React.ComponentProps<typeof AspectRatioPrimitive.Root>) {\n  return <AspectRatioPrimitive.Root data-slot=\"aspect-ratio\" {...props} />\n}\n\nexport { AspectRatio }\n","size_bytes":280},"components/ui/avatar.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as AvatarPrimitive from '@radix-ui/react-avatar'\n\nimport { cn } from '@/lib/utils'\n\nfunction Avatar({\n  className,\n  ...props\n}: React.ComponentProps<typeof AvatarPrimitive.Root>) {\n  return (\n    <AvatarPrimitive.Root\n      data-slot=\"avatar\"\n      className={cn(\n        'relative flex size-8 shrink-0 overflow-hidden rounded-full',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction AvatarImage({\n  className,\n  ...props\n}: React.ComponentProps<typeof AvatarPrimitive.Image>) {\n  return (\n    <AvatarPrimitive.Image\n      data-slot=\"avatar-image\"\n      className={cn('aspect-square size-full', className)}\n      {...props}\n    />\n  )\n}\n\nfunction AvatarFallback({\n  className,\n  ...props\n}: React.ComponentProps<typeof AvatarPrimitive.Fallback>) {\n  return (\n    <AvatarPrimitive.Fallback\n      data-slot=\"avatar-fallback\"\n      className={cn(\n        'bg-muted flex size-full items-center justify-center rounded-full',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1099},"components/ui/badge.tsx":{"content":"import * as React from 'react'\nimport { Slot } from '@radix-ui/react-slot'\nimport { cva, type VariantProps } from 'class-variance-authority'\n\nimport { cn } from '@/lib/utils'\n\nconst badgeVariants = cva(\n  'inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden',\n  {\n    variants: {\n      variant: {\n        default:\n          'border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90',\n        secondary:\n          'border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90',\n        destructive:\n          'border-transparent bg-destructive text-white [a&]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60',\n        outline:\n          'text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n    },\n  },\n)\n\nfunction Badge({\n  className,\n  variant,\n  asChild = false,\n  ...props\n}: React.ComponentProps<'span'> &\n  VariantProps<typeof badgeVariants> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : 'span'\n\n  return (\n    <Comp\n      data-slot=\"badge\"\n      className={cn(badgeVariants({ variant }), className)}\n      {...props}\n    />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1632},"components/ui/breadcrumb.tsx":{"content":"import * as React from 'react'\nimport { Slot } from '@radix-ui/react-slot'\nimport { ChevronRight, MoreHorizontal } from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\n\nfunction Breadcrumb({ ...props }: React.ComponentProps<'nav'>) {\n  return <nav aria-label=\"breadcrumb\" data-slot=\"breadcrumb\" {...props} />\n}\n\nfunction BreadcrumbList({ className, ...props }: React.ComponentProps<'ol'>) {\n  return (\n    <ol\n      data-slot=\"breadcrumb-list\"\n      className={cn(\n        'text-muted-foreground flex flex-wrap items-center gap-1.5 text-sm break-words sm:gap-2.5',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction BreadcrumbItem({ className, ...props }: React.ComponentProps<'li'>) {\n  return (\n    <li\n      data-slot=\"breadcrumb-item\"\n      className={cn('inline-flex items-center gap-1.5', className)}\n      {...props}\n    />\n  )\n}\n\nfunction BreadcrumbLink({\n  asChild,\n  className,\n  ...props\n}: React.ComponentProps<'a'> & {\n  asChild?: boolean\n}) {\n  const Comp = asChild ? Slot : 'a'\n\n  return (\n    <Comp\n      data-slot=\"breadcrumb-link\"\n      className={cn('hover:text-foreground transition-colors', className)}\n      {...props}\n    />\n  )\n}\n\nfunction BreadcrumbPage({ className, ...props }: React.ComponentProps<'span'>) {\n  return (\n    <span\n      data-slot=\"breadcrumb-page\"\n      role=\"link\"\n      aria-disabled=\"true\"\n      aria-current=\"page\"\n      className={cn('text-foreground font-normal', className)}\n      {...props}\n    />\n  )\n}\n\nfunction BreadcrumbSeparator({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<'li'>) {\n  return (\n    <li\n      data-slot=\"breadcrumb-separator\"\n      role=\"presentation\"\n      aria-hidden=\"true\"\n      className={cn('[&>svg]:size-3.5', className)}\n      {...props}\n    >\n      {children ?? <ChevronRight />}\n    </li>\n  )\n}\n\nfunction BreadcrumbEllipsis({\n  className,\n  ...props\n}: React.ComponentProps<'span'>) {\n  return (\n    <span\n      data-slot=\"breadcrumb-ellipsis\"\n      role=\"presentation\"\n      aria-hidden=\"true\"\n      className={cn('flex size-9 items-center justify-center', className)}\n      {...props}\n    >\n      <MoreHorizontal className=\"size-4\" />\n      <span className=\"sr-only\">More</span>\n    </span>\n  )\n}\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2358},"components/ui/button.tsx":{"content":"import * as React from 'react'\nimport { Slot } from '@radix-ui/react-slot'\nimport { cva, type VariantProps } from 'class-variance-authority'\n\nimport { cn } from '@/lib/utils'\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n  {\n    variants: {\n      variant: {\n        default:\n          'bg-primary text-primary-foreground shadow-xs hover:bg-primary/90',\n        destructive:\n          'bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60',\n        outline:\n          'border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50',\n        secondary:\n          'bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80',\n        ghost:\n          'hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50',\n        link: 'text-primary underline-offset-4 hover:underline',\n      },\n      size: {\n        default: 'h-9 px-4 py-2 has-[>svg]:px-3',\n        sm: 'h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5',\n        lg: 'h-10 rounded-md px-6 has-[>svg]:px-4',\n        icon: 'size-9',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  },\n)\n\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: React.ComponentProps<'button'> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean\n  }) {\n  const Comp = asChild ? Slot : 'button'\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props}\n    />\n  )\n}\n\nexport { Button, buttonVariants }\n","size_bytes":2124},"components/ui/calendar.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport {\n  ChevronDownIcon,\n  ChevronLeftIcon,\n  ChevronRightIcon,\n} from 'lucide-react'\nimport { DayButton, DayPicker, getDefaultClassNames } from 'react-day-picker'\n\nimport { cn } from '@/lib/utils'\nimport { Button, buttonVariants } from '@/components/ui/button'\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  captionLayout = 'label',\n  buttonVariant = 'ghost',\n  formatters,\n  components,\n  ...props\n}: React.ComponentProps<typeof DayPicker> & {\n  buttonVariant?: React.ComponentProps<typeof Button>['variant']\n}) {\n  const defaultClassNames = getDefaultClassNames()\n\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\n        'bg-background group/calendar p-3 [--cell-size:--spacing(8)] [[data-slot=card-content]_&]:bg-transparent [[data-slot=popover-content]_&]:bg-transparent',\n        String.raw`rtl:**:[.rdp-button\\_next>svg]:rotate-180`,\n        String.raw`rtl:**:[.rdp-button\\_previous>svg]:rotate-180`,\n        className,\n      )}\n      captionLayout={captionLayout}\n      formatters={{\n        formatMonthDropdown: (date) =>\n          date.toLocaleString('default', { month: 'short' }),\n        ...formatters,\n      }}\n      classNames={{\n        root: cn('w-fit', defaultClassNames.root),\n        months: cn(\n          'flex gap-4 flex-col md:flex-row relative',\n          defaultClassNames.months,\n        ),\n        month: cn('flex flex-col w-full gap-4', defaultClassNames.month),\n        nav: cn(\n          'flex items-center gap-1 w-full absolute top-0 inset-x-0 justify-between',\n          defaultClassNames.nav,\n        ),\n        button_previous: cn(\n          buttonVariants({ variant: buttonVariant }),\n          'size-(--cell-size) aria-disabled:opacity-50 p-0 select-none',\n          defaultClassNames.button_previous,\n        ),\n        button_next: cn(\n          buttonVariants({ variant: buttonVariant }),\n          'size-(--cell-size) aria-disabled:opacity-50 p-0 select-none',\n          defaultClassNames.button_next,\n        ),\n        month_caption: cn(\n          'flex items-center justify-center h-(--cell-size) w-full px-(--cell-size)',\n          defaultClassNames.month_caption,\n        ),\n        dropdowns: cn(\n          'w-full flex items-center text-sm font-medium justify-center h-(--cell-size) gap-1.5',\n          defaultClassNames.dropdowns,\n        ),\n        dropdown_root: cn(\n          'relative has-focus:border-ring border border-input shadow-xs has-focus:ring-ring/50 has-focus:ring-[3px] rounded-md',\n          defaultClassNames.dropdown_root,\n        ),\n        dropdown: cn(\n          'absolute bg-popover inset-0 opacity-0',\n          defaultClassNames.dropdown,\n        ),\n        caption_label: cn(\n          'select-none font-medium',\n          captionLayout === 'label'\n            ? 'text-sm'\n            : 'rounded-md pl-2 pr-1 flex items-center gap-1 text-sm h-8 [&>svg]:text-muted-foreground [&>svg]:size-3.5',\n          defaultClassNames.caption_label,\n        ),\n        table: 'w-full border-collapse',\n        weekdays: cn('flex', defaultClassNames.weekdays),\n        weekday: cn(\n          'text-muted-foreground rounded-md flex-1 font-normal text-[0.8rem] select-none',\n          defaultClassNames.weekday,\n        ),\n        week: cn('flex w-full mt-2', defaultClassNames.week),\n        week_number_header: cn(\n          'select-none w-(--cell-size)',\n          defaultClassNames.week_number_header,\n        ),\n        week_number: cn(\n          'text-[0.8rem] select-none text-muted-foreground',\n          defaultClassNames.week_number,\n        ),\n        day: cn(\n          'relative w-full h-full p-0 text-center [&:first-child[data-selected=true]_button]:rounded-l-md [&:last-child[data-selected=true]_button]:rounded-r-md group/day aspect-square select-none',\n          defaultClassNames.day,\n        ),\n        range_start: cn(\n          'rounded-l-md bg-accent',\n          defaultClassNames.range_start,\n        ),\n        range_middle: cn('rounded-none', defaultClassNames.range_middle),\n        range_end: cn('rounded-r-md bg-accent', defaultClassNames.range_end),\n        today: cn(\n          'bg-accent text-accent-foreground rounded-md data-[selected=true]:rounded-none',\n          defaultClassNames.today,\n        ),\n        outside: cn(\n          'text-muted-foreground aria-selected:text-muted-foreground',\n          defaultClassNames.outside,\n        ),\n        disabled: cn(\n          'text-muted-foreground opacity-50',\n          defaultClassNames.disabled,\n        ),\n        hidden: cn('invisible', defaultClassNames.hidden),\n        ...classNames,\n      }}\n      components={{\n        Root: ({ className, rootRef, ...props }) => {\n          return (\n            <div\n              data-slot=\"calendar\"\n              ref={rootRef}\n              className={cn(className)}\n              {...props}\n            />\n          )\n        },\n        Chevron: ({ className, orientation, ...props }) => {\n          if (orientation === 'left') {\n            return (\n              <ChevronLeftIcon className={cn('size-4', className)} {...props} />\n            )\n          }\n\n          if (orientation === 'right') {\n            return (\n              <ChevronRightIcon\n                className={cn('size-4', className)}\n                {...props}\n              />\n            )\n          }\n\n          return (\n            <ChevronDownIcon className={cn('size-4', className)} {...props} />\n          )\n        },\n        DayButton: CalendarDayButton,\n        WeekNumber: ({ children, ...props }) => {\n          return (\n            <td {...props}>\n              <div className=\"flex size-(--cell-size) items-center justify-center text-center\">\n                {children}\n              </div>\n            </td>\n          )\n        },\n        ...components,\n      }}\n      {...props}\n    />\n  )\n}\n\nfunction CalendarDayButton({\n  className,\n  day,\n  modifiers,\n  ...props\n}: React.ComponentProps<typeof DayButton>) {\n  const defaultClassNames = getDefaultClassNames()\n\n  const ref = React.useRef<HTMLButtonElement>(null)\n  React.useEffect(() => {\n    if (modifiers.focused) ref.current?.focus()\n  }, [modifiers.focused])\n\n  return (\n    <Button\n      ref={ref}\n      variant=\"ghost\"\n      size=\"icon\"\n      data-day={day.date.toLocaleDateString()}\n      data-selected-single={\n        modifiers.selected &&\n        !modifiers.range_start &&\n        !modifiers.range_end &&\n        !modifiers.range_middle\n      }\n      data-range-start={modifiers.range_start}\n      data-range-end={modifiers.range_end}\n      data-range-middle={modifiers.range_middle}\n      className={cn(\n        'data-[selected-single=true]:bg-primary data-[selected-single=true]:text-primary-foreground data-[range-middle=true]:bg-accent data-[range-middle=true]:text-accent-foreground data-[range-start=true]:bg-primary data-[range-start=true]:text-primary-foreground data-[range-end=true]:bg-primary data-[range-end=true]:text-primary-foreground group-data-[focused=true]/day:border-ring group-data-[focused=true]/day:ring-ring/50 dark:hover:text-accent-foreground flex aspect-square size-auto w-full min-w-(--cell-size) flex-col gap-1 leading-none font-normal group-data-[focused=true]/day:relative group-data-[focused=true]/day:z-10 group-data-[focused=true]/day:ring-[3px] data-[range-end=true]:rounded-md data-[range-end=true]:rounded-r-md data-[range-middle=true]:rounded-none data-[range-start=true]:rounded-md data-[range-start=true]:rounded-l-md [&>span]:text-xs [&>span]:opacity-70',\n        defaultClassNames.day,\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Calendar, CalendarDayButton }\n","size_bytes":7679},"components/ui/card.tsx":{"content":"import * as React from 'react'\n\nimport { cn } from '@/lib/utils'\n\nfunction Card({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"card\"\n      className={cn(\n        'bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardHeader({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"card-header\"\n      className={cn(\n        '@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardTitle({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"card-title\"\n      className={cn('leading-none font-semibold', className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardDescription({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"card-description\"\n      className={cn('text-muted-foreground text-sm', className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardAction({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"card-action\"\n      className={cn(\n        'col-start-2 row-span-2 row-start-1 self-start justify-self-end',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardContent({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"card-content\"\n      className={cn('px-6', className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardFooter({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"card-footer\"\n      className={cn('flex items-center px-6 [.border-t]:pt-6', className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardAction,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1992},"components/ui/carousel.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from 'embla-carousel-react'\nimport { ArrowLeft, ArrowRight } from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\nimport { Button } from '@/components/ui/button'\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: 'horizontal' | 'vertical'\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error('useCarousel must be used within a <Carousel />')\n  }\n\n  return context\n}\n\nfunction Carousel({\n  orientation = 'horizontal',\n  opts,\n  setApi,\n  plugins,\n  className,\n  children,\n  ...props\n}: React.ComponentProps<'div'> & CarouselProps) {\n  const [carouselRef, api] = useEmblaCarousel(\n    {\n      ...opts,\n      axis: orientation === 'horizontal' ? 'x' : 'y',\n    },\n    plugins,\n  )\n  const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n  const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n  const onSelect = React.useCallback((api: CarouselApi) => {\n    if (!api) return\n    setCanScrollPrev(api.canScrollPrev())\n    setCanScrollNext(api.canScrollNext())\n  }, [])\n\n  const scrollPrev = React.useCallback(() => {\n    api?.scrollPrev()\n  }, [api])\n\n  const scrollNext = React.useCallback(() => {\n    api?.scrollNext()\n  }, [api])\n\n  const handleKeyDown = React.useCallback(\n    (event: React.KeyboardEvent<HTMLDivElement>) => {\n      if (event.key === 'ArrowLeft') {\n        event.preventDefault()\n        scrollPrev()\n      } else if (event.key === 'ArrowRight') {\n        event.preventDefault()\n        scrollNext()\n      }\n    },\n    [scrollPrev, scrollNext],\n  )\n\n  React.useEffect(() => {\n    if (!api || !setApi) return\n    setApi(api)\n  }, [api, setApi])\n\n  React.useEffect(() => {\n    if (!api) return\n    onSelect(api)\n    api.on('reInit', onSelect)\n    api.on('select', onSelect)\n\n    return () => {\n      api?.off('select', onSelect)\n    }\n  }, [api, onSelect])\n\n  return (\n    <CarouselContext.Provider\n      value={{\n        carouselRef,\n        api: api,\n        opts,\n        orientation:\n          orientation || (opts?.axis === 'y' ? 'vertical' : 'horizontal'),\n        scrollPrev,\n        scrollNext,\n        canScrollPrev,\n        canScrollNext,\n      }}\n    >\n      <div\n        onKeyDownCapture={handleKeyDown}\n        className={cn('relative', className)}\n        role=\"region\"\n        aria-roledescription=\"carousel\"\n        data-slot=\"carousel\"\n        {...props}\n      >\n        {children}\n      </div>\n    </CarouselContext.Provider>\n  )\n}\n\nfunction CarouselContent({ className, ...props }: React.ComponentProps<'div'>) {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div\n      ref={carouselRef}\n      className=\"overflow-hidden\"\n      data-slot=\"carousel-content\"\n    >\n      <div\n        className={cn(\n          'flex',\n          orientation === 'horizontal' ? '-ml-4' : '-mt-4 flex-col',\n          className,\n        )}\n        {...props}\n      />\n    </div>\n  )\n}\n\nfunction CarouselItem({ className, ...props }: React.ComponentProps<'div'>) {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      data-slot=\"carousel-item\"\n      className={cn(\n        'min-w-0 shrink-0 grow-0 basis-full',\n        orientation === 'horizontal' ? 'pl-4' : 'pt-4',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CarouselPrevious({\n  className,\n  variant = 'outline',\n  size = 'icon',\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      data-slot=\"carousel-previous\"\n      variant={variant}\n      size={size}\n      className={cn(\n        'absolute size-8 rounded-full',\n        orientation === 'horizontal'\n          ? 'top-1/2 -left-12 -translate-y-1/2'\n          : '-top-12 left-1/2 -translate-x-1/2 rotate-90',\n        className,\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n}\n\nfunction CarouselNext({\n  className,\n  variant = 'outline',\n  size = 'icon',\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      data-slot=\"carousel-next\"\n      variant={variant}\n      size={size}\n      className={cn(\n        'absolute size-8 rounded-full',\n        orientation === 'horizontal'\n          ? 'top-1/2 -right-12 -translate-y-1/2'\n          : '-bottom-12 left-1/2 -translate-x-1/2 rotate-90',\n        className,\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n}\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":5562},"components/ui/chart.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as RechartsPrimitive from 'recharts'\n\nimport { cn } from '@/lib/utils'\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: '', dark: '.dark' } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error('useChart must be used within a <ChartContainer />')\n  }\n\n  return context\n}\n\nfunction ChartContainer({\n  id,\n  className,\n  children,\n  config,\n  ...props\n}: React.ComponentProps<'div'> & {\n  config: ChartConfig\n  children: React.ComponentProps<\n    typeof RechartsPrimitive.ResponsiveContainer\n  >['children']\n}) {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, '')}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-slot=\"chart\"\n        data-chart={chartId}\n        className={cn(\n          \"[&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border flex aspect-video justify-center text-xs [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-hidden [&_.recharts-sector]:outline-hidden [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-surface]:outline-hidden\",\n          className,\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n}\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color,\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join('\\n')}\n}\n`,\n          )\n          .join('\\n'),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nfunction ChartTooltipContent({\n  active,\n  payload,\n  className,\n  indicator = 'dot',\n  hideLabel = false,\n  hideIndicator = false,\n  label,\n  labelFormatter,\n  labelClassName,\n  formatter,\n  color,\n  nameKey,\n  labelKey,\n}: React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n  React.ComponentProps<'div'> & {\n    hideLabel?: boolean\n    hideIndicator?: boolean\n    indicator?: 'line' | 'dot' | 'dashed'\n    nameKey?: string\n    labelKey?: string\n  }) {\n  const { config } = useChart()\n\n  const tooltipLabel = React.useMemo(() => {\n    if (hideLabel || !payload?.length) {\n      return null\n    }\n\n    const [item] = payload\n    const key = `${labelKey || item?.dataKey || item?.name || 'value'}`\n    const itemConfig = getPayloadConfigFromPayload(config, item, key)\n    const value =\n      !labelKey && typeof label === 'string'\n        ? config[label as keyof typeof config]?.label || label\n        : itemConfig?.label\n\n    if (labelFormatter) {\n      return (\n        <div className={cn('font-medium', labelClassName)}>\n          {labelFormatter(value, payload)}\n        </div>\n      )\n    }\n\n    if (!value) {\n      return null\n    }\n\n    return <div className={cn('font-medium', labelClassName)}>{value}</div>\n  }, [\n    label,\n    labelFormatter,\n    payload,\n    hideLabel,\n    labelClassName,\n    config,\n    labelKey,\n  ])\n\n  if (!active || !payload?.length) {\n    return null\n  }\n\n  const nestLabel = payload.length === 1 && indicator !== 'dot'\n\n  return (\n    <div\n      className={cn(\n        'border-border/50 bg-background grid min-w-[8rem] items-start gap-1.5 rounded-lg border px-2.5 py-1.5 text-xs shadow-xl',\n        className,\n      )}\n    >\n      {!nestLabel ? tooltipLabel : null}\n      <div className=\"grid gap-1.5\">\n        {payload.map((item, index) => {\n          const key = `${nameKey || item.name || item.dataKey || 'value'}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n          const indicatorColor = color || item.payload.fill || item.color\n\n          return (\n            <div\n              key={item.dataKey}\n              className={cn(\n                '[&>svg]:text-muted-foreground flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5',\n                indicator === 'dot' && 'items-center',\n              )}\n            >\n              {formatter && item?.value !== undefined && item.name ? (\n                formatter(item.value, item.name, item, index, item.payload)\n              ) : (\n                <>\n                  {itemConfig?.icon ? (\n                    <itemConfig.icon />\n                  ) : (\n                    !hideIndicator && (\n                      <div\n                        className={cn(\n                          'shrink-0 rounded-[2px] border-(--color-border) bg-(--color-bg)',\n                          {\n                            'h-2.5 w-2.5': indicator === 'dot',\n                            'w-1': indicator === 'line',\n                            'w-0 border-[1.5px] border-dashed bg-transparent':\n                              indicator === 'dashed',\n                            'my-0.5': nestLabel && indicator === 'dashed',\n                          },\n                        )}\n                        style={\n                          {\n                            '--color-bg': indicatorColor,\n                            '--color-border': indicatorColor,\n                          } as React.CSSProperties\n                        }\n                      />\n                    )\n                  )}\n                  <div\n                    className={cn(\n                      'flex flex-1 justify-between leading-none',\n                      nestLabel ? 'items-end' : 'items-center',\n                    )}\n                  >\n                    <div className=\"grid gap-1.5\">\n                      {nestLabel ? tooltipLabel : null}\n                      <span className=\"text-muted-foreground\">\n                        {itemConfig?.label || item.name}\n                      </span>\n                    </div>\n                    {item.value && (\n                      <span className=\"text-foreground font-mono font-medium tabular-nums\">\n                        {item.value.toLocaleString()}\n                      </span>\n                    )}\n                  </div>\n                </>\n              )}\n            </div>\n          )\n        })}\n      </div>\n    </div>\n  )\n}\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nfunction ChartLegendContent({\n  className,\n  hideIcon = false,\n  payload,\n  verticalAlign = 'bottom',\n  nameKey,\n}: React.ComponentProps<'div'> &\n  Pick<RechartsPrimitive.LegendProps, 'payload' | 'verticalAlign'> & {\n    hideIcon?: boolean\n    nameKey?: string\n  }) {\n  const { config } = useChart()\n\n  if (!payload?.length) {\n    return null\n  }\n\n  return (\n    <div\n      className={cn(\n        'flex items-center justify-center gap-4',\n        verticalAlign === 'top' ? 'pb-3' : 'pt-3',\n        className,\n      )}\n    >\n      {payload.map((item) => {\n        const key = `${nameKey || item.dataKey || 'value'}`\n        const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n        return (\n          <div\n            key={item.value}\n            className={\n              '[&>svg]:text-muted-foreground flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3'\n            }\n          >\n            {itemConfig?.icon && !hideIcon ? (\n              <itemConfig.icon />\n            ) : (\n              <div\n                className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                style={{\n                  backgroundColor: item.color,\n                }}\n              />\n            )}\n            {itemConfig?.label}\n          </div>\n        )\n      })}\n    </div>\n  )\n}\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string,\n) {\n  if (typeof payload !== 'object' || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    'payload' in payload &&\n    typeof payload.payload === 'object' &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === 'string'\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === 'string'\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":9786},"components/ui/checkbox.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as CheckboxPrimitive from '@radix-ui/react-checkbox'\nimport { CheckIcon } from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\n\nfunction Checkbox({\n  className,\n  ...props\n}: React.ComponentProps<typeof CheckboxPrimitive.Root>) {\n  return (\n    <CheckboxPrimitive.Root\n      data-slot=\"checkbox\"\n      className={cn(\n        'peer border-input dark:bg-input/30 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground dark:data-[state=checked]:bg-primary data-[state=checked]:border-primary focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive size-4 shrink-0 rounded-[4px] border shadow-xs transition-shadow outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50',\n        className,\n      )}\n      {...props}\n    >\n      <CheckboxPrimitive.Indicator\n        data-slot=\"checkbox-indicator\"\n        className=\"flex items-center justify-center text-current transition-none\"\n      >\n        <CheckIcon className=\"size-3.5\" />\n      </CheckboxPrimitive.Indicator>\n    </CheckboxPrimitive.Root>\n  )\n}\n\nexport { Checkbox }\n","size_bytes":1227},"components/ui/collapsible.tsx":{"content":"'use client'\n\nimport * as CollapsiblePrimitive from '@radix-ui/react-collapsible'\n\nfunction Collapsible({\n  ...props\n}: React.ComponentProps<typeof CollapsiblePrimitive.Root>) {\n  return <CollapsiblePrimitive.Root data-slot=\"collapsible\" {...props} />\n}\n\nfunction CollapsibleTrigger({\n  ...props\n}: React.ComponentProps<typeof CollapsiblePrimitive.CollapsibleTrigger>) {\n  return (\n    <CollapsiblePrimitive.CollapsibleTrigger\n      data-slot=\"collapsible-trigger\"\n      {...props}\n    />\n  )\n}\n\nfunction CollapsibleContent({\n  ...props\n}: React.ComponentProps<typeof CollapsiblePrimitive.CollapsibleContent>) {\n  return (\n    <CollapsiblePrimitive.CollapsibleContent\n      data-slot=\"collapsible-content\"\n      {...props}\n    />\n  )\n}\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":800},"components/ui/command.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport { Command as CommandPrimitive } from 'cmdk'\nimport { SearchIcon } from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog'\n\nfunction Command({\n  className,\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive>) {\n  return (\n    <CommandPrimitive\n      data-slot=\"command\"\n      className={cn(\n        'bg-popover text-popover-foreground flex h-full w-full flex-col overflow-hidden rounded-md',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CommandDialog({\n  title = 'Command Palette',\n  description = 'Search for a command to run...',\n  children,\n  className,\n  showCloseButton = true,\n  ...props\n}: React.ComponentProps<typeof Dialog> & {\n  title?: string\n  description?: string\n  className?: string\n  showCloseButton?: boolean\n}) {\n  return (\n    <Dialog {...props}>\n      <DialogHeader className=\"sr-only\">\n        <DialogTitle>{title}</DialogTitle>\n        <DialogDescription>{description}</DialogDescription>\n      </DialogHeader>\n      <DialogContent\n        className={cn('overflow-hidden p-0', className)}\n        showCloseButton={showCloseButton}\n      >\n        <Command className=\"[&_[cmdk-group-heading]]:text-muted-foreground **:data-[slot=command-input-wrapper]:h-12 [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group]]:px-2 [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nfunction CommandInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.Input>) {\n  return (\n    <div\n      data-slot=\"command-input-wrapper\"\n      className=\"flex h-9 items-center gap-2 border-b px-3\"\n    >\n      <SearchIcon className=\"size-4 shrink-0 opacity-50\" />\n      <CommandPrimitive.Input\n        data-slot=\"command-input\"\n        className={cn(\n          'placeholder:text-muted-foreground flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-hidden disabled:cursor-not-allowed disabled:opacity-50',\n          className,\n        )}\n        {...props}\n      />\n    </div>\n  )\n}\n\nfunction CommandList({\n  className,\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.List>) {\n  return (\n    <CommandPrimitive.List\n      data-slot=\"command-list\"\n      className={cn(\n        'max-h-[300px] scroll-py-1 overflow-x-hidden overflow-y-auto',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CommandEmpty({\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.Empty>) {\n  return (\n    <CommandPrimitive.Empty\n      data-slot=\"command-empty\"\n      className=\"py-6 text-center text-sm\"\n      {...props}\n    />\n  )\n}\n\nfunction CommandGroup({\n  className,\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.Group>) {\n  return (\n    <CommandPrimitive.Group\n      data-slot=\"command-group\"\n      className={cn(\n        'text-foreground [&_[cmdk-group-heading]]:text-muted-foreground overflow-hidden p-1 [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CommandSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.Separator>) {\n  return (\n    <CommandPrimitive.Separator\n      data-slot=\"command-separator\"\n      className={cn('bg-border -mx-1 h-px', className)}\n      {...props}\n    />\n  )\n}\n\nfunction CommandItem({\n  className,\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.Item>) {\n  return (\n    <CommandPrimitive.Item\n      data-slot=\"command-item\"\n      className={cn(\n        \"data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled=true]:pointer-events-none data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CommandShortcut({\n  className,\n  ...props\n}: React.ComponentProps<'span'>) {\n  return (\n    <span\n      data-slot=\"command-shortcut\"\n      className={cn(\n        'text-muted-foreground ml-auto text-xs tracking-widest',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4824},"components/ui/context-menu.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as ContextMenuPrimitive from '@radix-ui/react-context-menu'\nimport { CheckIcon, ChevronRightIcon, CircleIcon } from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\n\nfunction ContextMenu({\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.Root>) {\n  return <ContextMenuPrimitive.Root data-slot=\"context-menu\" {...props} />\n}\n\nfunction ContextMenuTrigger({\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.Trigger>) {\n  return (\n    <ContextMenuPrimitive.Trigger data-slot=\"context-menu-trigger\" {...props} />\n  )\n}\n\nfunction ContextMenuGroup({\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.Group>) {\n  return (\n    <ContextMenuPrimitive.Group data-slot=\"context-menu-group\" {...props} />\n  )\n}\n\nfunction ContextMenuPortal({\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.Portal>) {\n  return (\n    <ContextMenuPrimitive.Portal data-slot=\"context-menu-portal\" {...props} />\n  )\n}\n\nfunction ContextMenuSub({\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.Sub>) {\n  return <ContextMenuPrimitive.Sub data-slot=\"context-menu-sub\" {...props} />\n}\n\nfunction ContextMenuRadioGroup({\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.RadioGroup>) {\n  return (\n    <ContextMenuPrimitive.RadioGroup\n      data-slot=\"context-menu-radio-group\"\n      {...props}\n    />\n  )\n}\n\nfunction ContextMenuSubTrigger({\n  className,\n  inset,\n  children,\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.SubTrigger> & {\n  inset?: boolean\n}) {\n  return (\n    <ContextMenuPrimitive.SubTrigger\n      data-slot=\"context-menu-sub-trigger\"\n      data-inset={inset}\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronRightIcon className=\"ml-auto\" />\n    </ContextMenuPrimitive.SubTrigger>\n  )\n}\n\nfunction ContextMenuSubContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.SubContent>) {\n  return (\n    <ContextMenuPrimitive.SubContent\n      data-slot=\"context-menu-sub-content\"\n      className={cn(\n        'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-context-menu-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction ContextMenuContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.Content>) {\n  return (\n    <ContextMenuPrimitive.Portal>\n      <ContextMenuPrimitive.Content\n        data-slot=\"context-menu-content\"\n        className={cn(\n          'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--radix-context-menu-content-available-height) min-w-[8rem] origin-(--radix-context-menu-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md',\n          className,\n        )}\n        {...props}\n      />\n    </ContextMenuPrimitive.Portal>\n  )\n}\n\nfunction ContextMenuItem({\n  className,\n  inset,\n  variant = 'default',\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.Item> & {\n  inset?: boolean\n  variant?: 'default' | 'destructive'\n}) {\n  return (\n    <ContextMenuPrimitive.Item\n      data-slot=\"context-menu-item\"\n      data-inset={inset}\n      data-variant={variant}\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction ContextMenuCheckboxItem({\n  className,\n  children,\n  checked,\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.CheckboxItem>) {\n  return (\n    <ContextMenuPrimitive.CheckboxItem\n      data-slot=\"context-menu-checkbox-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      checked={checked}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <ContextMenuPrimitive.ItemIndicator>\n          <CheckIcon className=\"size-4\" />\n        </ContextMenuPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </ContextMenuPrimitive.CheckboxItem>\n  )\n}\n\nfunction ContextMenuRadioItem({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.RadioItem>) {\n  return (\n    <ContextMenuPrimitive.RadioItem\n      data-slot=\"context-menu-radio-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <ContextMenuPrimitive.ItemIndicator>\n          <CircleIcon className=\"size-2 fill-current\" />\n        </ContextMenuPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </ContextMenuPrimitive.RadioItem>\n  )\n}\n\nfunction ContextMenuLabel({\n  className,\n  inset,\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.Label> & {\n  inset?: boolean\n}) {\n  return (\n    <ContextMenuPrimitive.Label\n      data-slot=\"context-menu-label\"\n      data-inset={inset}\n      className={cn(\n        'text-foreground px-2 py-1.5 text-sm font-medium data-[inset]:pl-8',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction ContextMenuSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.Separator>) {\n  return (\n    <ContextMenuPrimitive.Separator\n      data-slot=\"context-menu-separator\"\n      className={cn('bg-border -mx-1 my-1 h-px', className)}\n      {...props}\n    />\n  )\n}\n\nfunction ContextMenuShortcut({\n  className,\n  ...props\n}: React.ComponentProps<'span'>) {\n  return (\n    <span\n      data-slot=\"context-menu-shortcut\"\n      className={cn(\n        'text-muted-foreground ml-auto text-xs tracking-widest',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":8230},"components/ui/dialog.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as DialogPrimitive from '@radix-ui/react-dialog'\nimport { XIcon } from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\n\nfunction Dialog({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Root>) {\n  return <DialogPrimitive.Root data-slot=\"dialog\" {...props} />\n}\n\nfunction DialogTrigger({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Trigger>) {\n  return <DialogPrimitive.Trigger data-slot=\"dialog-trigger\" {...props} />\n}\n\nfunction DialogPortal({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Portal>) {\n  return <DialogPrimitive.Portal data-slot=\"dialog-portal\" {...props} />\n}\n\nfunction DialogClose({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Close>) {\n  return <DialogPrimitive.Close data-slot=\"dialog-close\" {...props} />\n}\n\nfunction DialogOverlay({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Overlay>) {\n  return (\n    <DialogPrimitive.Overlay\n      data-slot=\"dialog-overlay\"\n      className={cn(\n        'data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DialogContent({\n  className,\n  children,\n  showCloseButton = true,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Content> & {\n  showCloseButton?: boolean\n}) {\n  return (\n    <DialogPortal data-slot=\"dialog-portal\">\n      <DialogOverlay />\n      <DialogPrimitive.Content\n        data-slot=\"dialog-content\"\n        className={cn(\n          'bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg',\n          className,\n        )}\n        {...props}\n      >\n        {children}\n        {showCloseButton && (\n          <DialogPrimitive.Close\n            data-slot=\"dialog-close\"\n            className=\"ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\"\n          >\n            <XIcon />\n            <span className=\"sr-only\">Close</span>\n          </DialogPrimitive.Close>\n        )}\n      </DialogPrimitive.Content>\n    </DialogPortal>\n  )\n}\n\nfunction DialogHeader({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"dialog-header\"\n      className={cn('flex flex-col gap-2 text-center sm:text-left', className)}\n      {...props}\n    />\n  )\n}\n\nfunction DialogFooter({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"dialog-footer\"\n      className={cn(\n        'flex flex-col-reverse gap-2 sm:flex-row sm:justify-end',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DialogTitle({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Title>) {\n  return (\n    <DialogPrimitive.Title\n      data-slot=\"dialog-title\"\n      className={cn('text-lg leading-none font-semibold', className)}\n      {...props}\n    />\n  )\n}\n\nfunction DialogDescription({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Description>) {\n  return (\n    <DialogPrimitive.Description\n      data-slot=\"dialog-description\"\n      className={cn('text-muted-foreground text-sm', className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Dialog,\n  DialogClose,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogOverlay,\n  DialogPortal,\n  DialogTitle,\n  DialogTrigger,\n}\n","size_bytes":3985},"components/ui/drawer.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport { Drawer as DrawerPrimitive } from 'vaul'\n\nimport { cn } from '@/lib/utils'\n\nfunction Drawer({\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) {\n  return <DrawerPrimitive.Root data-slot=\"drawer\" {...props} />\n}\n\nfunction DrawerTrigger({\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Trigger>) {\n  return <DrawerPrimitive.Trigger data-slot=\"drawer-trigger\" {...props} />\n}\n\nfunction DrawerPortal({\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Portal>) {\n  return <DrawerPrimitive.Portal data-slot=\"drawer-portal\" {...props} />\n}\n\nfunction DrawerClose({\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Close>) {\n  return <DrawerPrimitive.Close data-slot=\"drawer-close\" {...props} />\n}\n\nfunction DrawerOverlay({\n  className,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Overlay>) {\n  return (\n    <DrawerPrimitive.Overlay\n      data-slot=\"drawer-overlay\"\n      className={cn(\n        'data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DrawerContent({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Content>) {\n  return (\n    <DrawerPortal data-slot=\"drawer-portal\">\n      <DrawerOverlay />\n      <DrawerPrimitive.Content\n        data-slot=\"drawer-content\"\n        className={cn(\n          'group/drawer-content bg-background fixed z-50 flex h-auto flex-col',\n          'data-[vaul-drawer-direction=top]:inset-x-0 data-[vaul-drawer-direction=top]:top-0 data-[vaul-drawer-direction=top]:mb-24 data-[vaul-drawer-direction=top]:max-h-[80vh] data-[vaul-drawer-direction=top]:rounded-b-lg data-[vaul-drawer-direction=top]:border-b',\n          'data-[vaul-drawer-direction=bottom]:inset-x-0 data-[vaul-drawer-direction=bottom]:bottom-0 data-[vaul-drawer-direction=bottom]:mt-24 data-[vaul-drawer-direction=bottom]:max-h-[80vh] data-[vaul-drawer-direction=bottom]:rounded-t-lg data-[vaul-drawer-direction=bottom]:border-t',\n          'data-[vaul-drawer-direction=right]:inset-y-0 data-[vaul-drawer-direction=right]:right-0 data-[vaul-drawer-direction=right]:w-3/4 data-[vaul-drawer-direction=right]:border-l data-[vaul-drawer-direction=right]:sm:max-w-sm',\n          'data-[vaul-drawer-direction=left]:inset-y-0 data-[vaul-drawer-direction=left]:left-0 data-[vaul-drawer-direction=left]:w-3/4 data-[vaul-drawer-direction=left]:border-r data-[vaul-drawer-direction=left]:sm:max-w-sm',\n          className,\n        )}\n        {...props}\n      >\n        <div className=\"bg-muted mx-auto mt-4 hidden h-2 w-[100px] shrink-0 rounded-full group-data-[vaul-drawer-direction=bottom]/drawer-content:block\" />\n        {children}\n      </DrawerPrimitive.Content>\n    </DrawerPortal>\n  )\n}\n\nfunction DrawerHeader({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"drawer-header\"\n      className={cn(\n        'flex flex-col gap-0.5 p-4 group-data-[vaul-drawer-direction=bottom]/drawer-content:text-center group-data-[vaul-drawer-direction=top]/drawer-content:text-center md:gap-1.5 md:text-left',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DrawerFooter({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"drawer-footer\"\n      className={cn('mt-auto flex flex-col gap-2 p-4', className)}\n      {...props}\n    />\n  )\n}\n\nfunction DrawerTitle({\n  className,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Title>) {\n  return (\n    <DrawerPrimitive.Title\n      data-slot=\"drawer-title\"\n      className={cn('text-foreground font-semibold', className)}\n      {...props}\n    />\n  )\n}\n\nfunction DrawerDescription({\n  className,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Description>) {\n  return (\n    <DrawerPrimitive.Description\n      data-slot=\"drawer-description\"\n      className={cn('text-muted-foreground text-sm', className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":4258},"components/ui/dropdown-menu.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as DropdownMenuPrimitive from '@radix-ui/react-dropdown-menu'\nimport { CheckIcon, ChevronRightIcon, CircleIcon } from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\n\nfunction DropdownMenu({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Root>) {\n  return <DropdownMenuPrimitive.Root data-slot=\"dropdown-menu\" {...props} />\n}\n\nfunction DropdownMenuPortal({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Portal>) {\n  return (\n    <DropdownMenuPrimitive.Portal data-slot=\"dropdown-menu-portal\" {...props} />\n  )\n}\n\nfunction DropdownMenuTrigger({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Trigger>) {\n  return (\n    <DropdownMenuPrimitive.Trigger\n      data-slot=\"dropdown-menu-trigger\"\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuContent({\n  className,\n  sideOffset = 4,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Content>) {\n  return (\n    <DropdownMenuPrimitive.Portal>\n      <DropdownMenuPrimitive.Content\n        data-slot=\"dropdown-menu-content\"\n        sideOffset={sideOffset}\n        className={cn(\n          'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--radix-dropdown-menu-content-available-height) min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md',\n          className,\n        )}\n        {...props}\n      />\n    </DropdownMenuPrimitive.Portal>\n  )\n}\n\nfunction DropdownMenuGroup({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Group>) {\n  return (\n    <DropdownMenuPrimitive.Group data-slot=\"dropdown-menu-group\" {...props} />\n  )\n}\n\nfunction DropdownMenuItem({\n  className,\n  inset,\n  variant = 'default',\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Item> & {\n  inset?: boolean\n  variant?: 'default' | 'destructive'\n}) {\n  return (\n    <DropdownMenuPrimitive.Item\n      data-slot=\"dropdown-menu-item\"\n      data-inset={inset}\n      data-variant={variant}\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuCheckboxItem({\n  className,\n  children,\n  checked,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.CheckboxItem>) {\n  return (\n    <DropdownMenuPrimitive.CheckboxItem\n      data-slot=\"dropdown-menu-checkbox-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      checked={checked}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <DropdownMenuPrimitive.ItemIndicator>\n          <CheckIcon className=\"size-4\" />\n        </DropdownMenuPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </DropdownMenuPrimitive.CheckboxItem>\n  )\n}\n\nfunction DropdownMenuRadioGroup({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioGroup>) {\n  return (\n    <DropdownMenuPrimitive.RadioGroup\n      data-slot=\"dropdown-menu-radio-group\"\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuRadioItem({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioItem>) {\n  return (\n    <DropdownMenuPrimitive.RadioItem\n      data-slot=\"dropdown-menu-radio-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <DropdownMenuPrimitive.ItemIndicator>\n          <CircleIcon className=\"size-2 fill-current\" />\n        </DropdownMenuPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </DropdownMenuPrimitive.RadioItem>\n  )\n}\n\nfunction DropdownMenuLabel({\n  className,\n  inset,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Label> & {\n  inset?: boolean\n}) {\n  return (\n    <DropdownMenuPrimitive.Label\n      data-slot=\"dropdown-menu-label\"\n      data-inset={inset}\n      className={cn(\n        'px-2 py-1.5 text-sm font-medium data-[inset]:pl-8',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Separator>) {\n  return (\n    <DropdownMenuPrimitive.Separator\n      data-slot=\"dropdown-menu-separator\"\n      className={cn('bg-border -mx-1 my-1 h-px', className)}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuShortcut({\n  className,\n  ...props\n}: React.ComponentProps<'span'>) {\n  return (\n    <span\n      data-slot=\"dropdown-menu-shortcut\"\n      className={cn(\n        'text-muted-foreground ml-auto text-xs tracking-widest',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuSub({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Sub>) {\n  return <DropdownMenuPrimitive.Sub data-slot=\"dropdown-menu-sub\" {...props} />\n}\n\nfunction DropdownMenuSubTrigger({\n  className,\n  inset,\n  children,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.SubTrigger> & {\n  inset?: boolean\n}) {\n  return (\n    <DropdownMenuPrimitive.SubTrigger\n      data-slot=\"dropdown-menu-sub-trigger\"\n      data-inset={inset}\n      className={cn(\n        'focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8',\n        className,\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronRightIcon className=\"ml-auto size-4\" />\n    </DropdownMenuPrimitive.SubTrigger>\n  )\n}\n\nfunction DropdownMenuSubContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.SubContent>) {\n  return (\n    <DropdownMenuPrimitive.SubContent\n      data-slot=\"dropdown-menu-sub-content\"\n      className={cn(\n        'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  DropdownMenu,\n  DropdownMenuPortal,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuLabel,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioGroup,\n  DropdownMenuRadioItem,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuSub,\n  DropdownMenuSubTrigger,\n  DropdownMenuSubContent,\n}\n","size_bytes":8292},"components/ui/form.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as LabelPrimitive from '@radix-ui/react-label'\nimport { Slot } from '@radix-ui/react-slot'\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  useFormState,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from 'react-hook-form'\n\nimport { cn } from '@/lib/utils'\nimport { Label } from '@/components/ui/label'\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue,\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState } = useFormContext()\n  const formState = useFormState({ name: fieldContext.name })\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error('useFormField should be used within <FormField>')\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue,\n)\n\nfunction FormItem({ className, ...props }: React.ComponentProps<'div'>) {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div\n        data-slot=\"form-item\"\n        className={cn('grid gap-2', className)}\n        {...props}\n      />\n    </FormItemContext.Provider>\n  )\n}\n\nfunction FormLabel({\n  className,\n  ...props\n}: React.ComponentProps<typeof LabelPrimitive.Root>) {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      data-slot=\"form-label\"\n      data-error={!!error}\n      className={cn('data-[error=true]:text-destructive', className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n}\n\nfunction FormControl({ ...props }: React.ComponentProps<typeof Slot>) {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      data-slot=\"form-control\"\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n}\n\nfunction FormDescription({ className, ...props }: React.ComponentProps<'p'>) {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      data-slot=\"form-description\"\n      id={formDescriptionId}\n      className={cn('text-muted-foreground text-sm', className)}\n      {...props}\n    />\n  )\n}\n\nfunction FormMessage({ className, ...props }: React.ComponentProps<'p'>) {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? '') : props.children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      data-slot=\"form-message\"\n      id={formMessageId}\n      className={cn('text-destructive text-sm', className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n}\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":3761},"components/ui/hover-card.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as HoverCardPrimitive from '@radix-ui/react-hover-card'\n\nimport { cn } from '@/lib/utils'\n\nfunction HoverCard({\n  ...props\n}: React.ComponentProps<typeof HoverCardPrimitive.Root>) {\n  return <HoverCardPrimitive.Root data-slot=\"hover-card\" {...props} />\n}\n\nfunction HoverCardTrigger({\n  ...props\n}: React.ComponentProps<typeof HoverCardPrimitive.Trigger>) {\n  return (\n    <HoverCardPrimitive.Trigger data-slot=\"hover-card-trigger\" {...props} />\n  )\n}\n\nfunction HoverCardContent({\n  className,\n  align = 'center',\n  sideOffset = 4,\n  ...props\n}: React.ComponentProps<typeof HoverCardPrimitive.Content>) {\n  return (\n    <HoverCardPrimitive.Portal data-slot=\"hover-card-portal\">\n      <HoverCardPrimitive.Content\n        data-slot=\"hover-card-content\"\n        align={align}\n        sideOffset={sideOffset}\n        className={cn(\n          'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-64 origin-(--radix-hover-card-content-transform-origin) rounded-md border p-4 shadow-md outline-hidden',\n          className,\n        )}\n        {...props}\n      />\n    </HoverCardPrimitive.Portal>\n  )\n}\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1533},"components/ui/input-otp.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport { OTPInput, OTPInputContext } from 'input-otp'\nimport { MinusIcon } from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\n\nfunction InputOTP({\n  className,\n  containerClassName,\n  ...props\n}: React.ComponentProps<typeof OTPInput> & {\n  containerClassName?: string\n}) {\n  return (\n    <OTPInput\n      data-slot=\"input-otp\"\n      containerClassName={cn(\n        'flex items-center gap-2 has-disabled:opacity-50',\n        containerClassName,\n      )}\n      className={cn('disabled:cursor-not-allowed', className)}\n      {...props}\n    />\n  )\n}\n\nfunction InputOTPGroup({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"input-otp-group\"\n      className={cn('flex items-center', className)}\n      {...props}\n    />\n  )\n}\n\nfunction InputOTPSlot({\n  index,\n  className,\n  ...props\n}: React.ComponentProps<'div'> & {\n  index: number\n}) {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext?.slots[index] ?? {}\n\n  return (\n    <div\n      data-slot=\"input-otp-slot\"\n      data-active={isActive}\n      className={cn(\n        'data-[active=true]:border-ring data-[active=true]:ring-ring/50 data-[active=true]:aria-invalid:ring-destructive/20 dark:data-[active=true]:aria-invalid:ring-destructive/40 aria-invalid:border-destructive data-[active=true]:aria-invalid:border-destructive dark:bg-input/30 border-input relative flex h-9 w-9 items-center justify-center border-y border-r text-sm shadow-xs transition-all outline-none first:rounded-l-md first:border-l last:rounded-r-md data-[active=true]:z-10 data-[active=true]:ring-[3px]',\n        className,\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"animate-caret-blink bg-foreground h-4 w-px duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n}\n\nfunction InputOTPSeparator({ ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div data-slot=\"input-otp-separator\" role=\"separator\" {...props}>\n      <MinusIcon />\n    </div>\n  )\n}\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2256},"components/ui/input.tsx":{"content":"import * as React from 'react'\n\nimport { cn } from '@/lib/utils'\n\nfunction Input({ className, type, ...props }: React.ComponentProps<'input'>) {\n  return (\n    <input\n      type={type}\n      data-slot=\"input\"\n      className={cn(\n        'file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',\n        'focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]',\n        'aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Input }\n","size_bytes":968},"components/ui/label.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as LabelPrimitive from '@radix-ui/react-label'\n\nimport { cn } from '@/lib/utils'\n\nfunction Label({\n  className,\n  ...props\n}: React.ComponentProps<typeof LabelPrimitive.Root>) {\n  return (\n    <LabelPrimitive.Root\n      data-slot=\"label\"\n      className={cn(\n        'flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Label }\n","size_bytes":612},"components/ui/menubar.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as MenubarPrimitive from '@radix-ui/react-menubar'\nimport { CheckIcon, ChevronRightIcon, CircleIcon } from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\n\nfunction Menubar({\n  className,\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Root>) {\n  return (\n    <MenubarPrimitive.Root\n      data-slot=\"menubar\"\n      className={cn(\n        'bg-background flex h-9 items-center gap-1 rounded-md border p-1 shadow-xs',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu data-slot=\"menubar-menu\" {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group data-slot=\"menubar-group\" {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal data-slot=\"menubar-portal\" {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return (\n    <MenubarPrimitive.RadioGroup data-slot=\"menubar-radio-group\" {...props} />\n  )\n}\n\nfunction MenubarTrigger({\n  className,\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Trigger>) {\n  return (\n    <MenubarPrimitive.Trigger\n      data-slot=\"menubar-trigger\"\n      className={cn(\n        'focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex items-center rounded-sm px-2 py-1 text-sm font-medium outline-hidden select-none',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction MenubarContent({\n  className,\n  align = 'start',\n  alignOffset = -4,\n  sideOffset = 8,\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Content>) {\n  return (\n    <MenubarPortal>\n      <MenubarPrimitive.Content\n        data-slot=\"menubar-content\"\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[12rem] origin-(--radix-menubar-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-md',\n          className,\n        )}\n        {...props}\n      />\n    </MenubarPortal>\n  )\n}\n\nfunction MenubarItem({\n  className,\n  inset,\n  variant = 'default',\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Item> & {\n  inset?: boolean\n  variant?: 'default' | 'destructive'\n}) {\n  return (\n    <MenubarPrimitive.Item\n      data-slot=\"menubar-item\"\n      data-inset={inset}\n      data-variant={variant}\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction MenubarCheckboxItem({\n  className,\n  children,\n  checked,\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.CheckboxItem>) {\n  return (\n    <MenubarPrimitive.CheckboxItem\n      data-slot=\"menubar-checkbox-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-xs py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      checked={checked}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <MenubarPrimitive.ItemIndicator>\n          <CheckIcon className=\"size-4\" />\n        </MenubarPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </MenubarPrimitive.CheckboxItem>\n  )\n}\n\nfunction MenubarRadioItem({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioItem>) {\n  return (\n    <MenubarPrimitive.RadioItem\n      data-slot=\"menubar-radio-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-xs py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <MenubarPrimitive.ItemIndicator>\n          <CircleIcon className=\"size-2 fill-current\" />\n        </MenubarPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </MenubarPrimitive.RadioItem>\n  )\n}\n\nfunction MenubarLabel({\n  className,\n  inset,\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Label> & {\n  inset?: boolean\n}) {\n  return (\n    <MenubarPrimitive.Label\n      data-slot=\"menubar-label\"\n      data-inset={inset}\n      className={cn(\n        'px-2 py-1.5 text-sm font-medium data-[inset]:pl-8',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction MenubarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Separator>) {\n  return (\n    <MenubarPrimitive.Separator\n      data-slot=\"menubar-separator\"\n      className={cn('bg-border -mx-1 my-1 h-px', className)}\n      {...props}\n    />\n  )\n}\n\nfunction MenubarShortcut({\n  className,\n  ...props\n}: React.ComponentProps<'span'>) {\n  return (\n    <span\n      data-slot=\"menubar-shortcut\"\n      className={cn(\n        'text-muted-foreground ml-auto text-xs tracking-widest',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nfunction MenubarSubTrigger({\n  className,\n  inset,\n  children,\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.SubTrigger> & {\n  inset?: boolean\n}) {\n  return (\n    <MenubarPrimitive.SubTrigger\n      data-slot=\"menubar-sub-trigger\"\n      data-inset={inset}\n      className={cn(\n        'focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-none select-none data-[inset]:pl-8',\n        className,\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronRightIcon className=\"ml-auto h-4 w-4\" />\n    </MenubarPrimitive.SubTrigger>\n  )\n}\n\nfunction MenubarSubContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.SubContent>) {\n  return (\n    <MenubarPrimitive.SubContent\n      data-slot=\"menubar-sub-content\"\n      className={cn(\n        'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-menubar-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Menubar,\n  MenubarPortal,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarGroup,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarItem,\n  MenubarShortcut,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarSub,\n  MenubarSubTrigger,\n  MenubarSubContent,\n}\n","size_bytes":8404},"components/ui/navigation-menu.tsx":{"content":"import * as React from 'react'\nimport * as NavigationMenuPrimitive from '@radix-ui/react-navigation-menu'\nimport { cva } from 'class-variance-authority'\nimport { ChevronDownIcon } from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\n\nfunction NavigationMenu({\n  className,\n  children,\n  viewport = true,\n  ...props\n}: React.ComponentProps<typeof NavigationMenuPrimitive.Root> & {\n  viewport?: boolean\n}) {\n  return (\n    <NavigationMenuPrimitive.Root\n      data-slot=\"navigation-menu\"\n      data-viewport={viewport}\n      className={cn(\n        'group/navigation-menu relative flex max-w-max flex-1 items-center justify-center',\n        className,\n      )}\n      {...props}\n    >\n      {children}\n      {viewport && <NavigationMenuViewport />}\n    </NavigationMenuPrimitive.Root>\n  )\n}\n\nfunction NavigationMenuList({\n  className,\n  ...props\n}: React.ComponentProps<typeof NavigationMenuPrimitive.List>) {\n  return (\n    <NavigationMenuPrimitive.List\n      data-slot=\"navigation-menu-list\"\n      className={cn(\n        'group flex flex-1 list-none items-center justify-center gap-1',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction NavigationMenuItem({\n  className,\n  ...props\n}: React.ComponentProps<typeof NavigationMenuPrimitive.Item>) {\n  return (\n    <NavigationMenuPrimitive.Item\n      data-slot=\"navigation-menu-item\"\n      className={cn('relative', className)}\n      {...props}\n    />\n  )\n}\n\nconst navigationMenuTriggerStyle = cva(\n  'group inline-flex h-9 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground disabled:pointer-events-none disabled:opacity-50 data-[state=open]:hover:bg-accent data-[state=open]:text-accent-foreground data-[state=open]:focus:bg-accent data-[state=open]:bg-accent/50 focus-visible:ring-ring/50 outline-none transition-[color,box-shadow] focus-visible:ring-[3px] focus-visible:outline-1',\n)\n\nfunction NavigationMenuTrigger({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof NavigationMenuPrimitive.Trigger>) {\n  return (\n    <NavigationMenuPrimitive.Trigger\n      data-slot=\"navigation-menu-trigger\"\n      className={cn(navigationMenuTriggerStyle(), 'group', className)}\n      {...props}\n    >\n      {children}{' '}\n      <ChevronDownIcon\n        className=\"relative top-[1px] ml-1 size-3 transition duration-300 group-data-[state=open]:rotate-180\"\n        aria-hidden=\"true\"\n      />\n    </NavigationMenuPrimitive.Trigger>\n  )\n}\n\nfunction NavigationMenuContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof NavigationMenuPrimitive.Content>) {\n  return (\n    <NavigationMenuPrimitive.Content\n      data-slot=\"navigation-menu-content\"\n      className={cn(\n        'data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 top-0 left-0 w-full p-2 pr-2.5 md:absolute md:w-auto',\n        'group-data-[viewport=false]/navigation-menu:bg-popover group-data-[viewport=false]/navigation-menu:text-popover-foreground group-data-[viewport=false]/navigation-menu:data-[state=open]:animate-in group-data-[viewport=false]/navigation-menu:data-[state=closed]:animate-out group-data-[viewport=false]/navigation-menu:data-[state=closed]:zoom-out-95 group-data-[viewport=false]/navigation-menu:data-[state=open]:zoom-in-95 group-data-[viewport=false]/navigation-menu:data-[state=open]:fade-in-0 group-data-[viewport=false]/navigation-menu:data-[state=closed]:fade-out-0 group-data-[viewport=false]/navigation-menu:top-full group-data-[viewport=false]/navigation-menu:mt-1.5 group-data-[viewport=false]/navigation-menu:overflow-hidden group-data-[viewport=false]/navigation-menu:rounded-md group-data-[viewport=false]/navigation-menu:border group-data-[viewport=false]/navigation-menu:shadow group-data-[viewport=false]/navigation-menu:duration-200 **:data-[slot=navigation-menu-link]:focus:ring-0 **:data-[slot=navigation-menu-link]:focus:outline-none',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction NavigationMenuViewport({\n  className,\n  ...props\n}: React.ComponentProps<typeof NavigationMenuPrimitive.Viewport>) {\n  return (\n    <div\n      className={'absolute top-full left-0 isolate z-50 flex justify-center'}\n    >\n      <NavigationMenuPrimitive.Viewport\n        data-slot=\"navigation-menu-viewport\"\n        className={cn(\n          'origin-top-center bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border shadow md:w-[var(--radix-navigation-menu-viewport-width)]',\n          className,\n        )}\n        {...props}\n      />\n    </div>\n  )\n}\n\nfunction NavigationMenuLink({\n  className,\n  ...props\n}: React.ComponentProps<typeof NavigationMenuPrimitive.Link>) {\n  return (\n    <NavigationMenuPrimitive.Link\n      data-slot=\"navigation-menu-link\"\n      className={cn(\n        \"data-[active=true]:focus:bg-accent data-[active=true]:hover:bg-accent data-[active=true]:bg-accent/50 data-[active=true]:text-accent-foreground hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus-visible:ring-ring/50 [&_svg:not([class*='text-'])]:text-muted-foreground flex flex-col gap-1 rounded-sm p-2 text-sm transition-all outline-none focus-visible:ring-[3px] focus-visible:outline-1 [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction NavigationMenuIndicator({\n  className,\n  ...props\n}: React.ComponentProps<typeof NavigationMenuPrimitive.Indicator>) {\n  return (\n    <NavigationMenuPrimitive.Indicator\n      data-slot=\"navigation-menu-indicator\"\n      className={cn(\n        'data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden',\n        className,\n      )}\n      {...props}\n    >\n      <div className=\"bg-border relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm shadow-md\" />\n    </NavigationMenuPrimitive.Indicator>\n  )\n}\n\nexport {\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n  navigationMenuTriggerStyle,\n}\n","size_bytes":6651},"components/ui/pagination.tsx":{"content":"import * as React from 'react'\nimport {\n  ChevronLeftIcon,\n  ChevronRightIcon,\n  MoreHorizontalIcon,\n} from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\nimport { Button, buttonVariants } from '@/components/ui/button'\n\nfunction Pagination({ className, ...props }: React.ComponentProps<'nav'>) {\n  return (\n    <nav\n      role=\"navigation\"\n      aria-label=\"pagination\"\n      data-slot=\"pagination\"\n      className={cn('mx-auto flex w-full justify-center', className)}\n      {...props}\n    />\n  )\n}\n\nfunction PaginationContent({\n  className,\n  ...props\n}: React.ComponentProps<'ul'>) {\n  return (\n    <ul\n      data-slot=\"pagination-content\"\n      className={cn('flex flex-row items-center gap-1', className)}\n      {...props}\n    />\n  )\n}\n\nfunction PaginationItem({ ...props }: React.ComponentProps<'li'>) {\n  return <li data-slot=\"pagination-item\" {...props} />\n}\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<React.ComponentProps<typeof Button>, 'size'> &\n  React.ComponentProps<'a'>\n\nfunction PaginationLink({\n  className,\n  isActive,\n  size = 'icon',\n  ...props\n}: PaginationLinkProps) {\n  return (\n    <a\n      aria-current={isActive ? 'page' : undefined}\n      data-slot=\"pagination-link\"\n      data-active={isActive}\n      className={cn(\n        buttonVariants({\n          variant: isActive ? 'outline' : 'ghost',\n          size,\n        }),\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction PaginationPrevious({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) {\n  return (\n    <PaginationLink\n      aria-label=\"Go to previous page\"\n      size=\"default\"\n      className={cn('gap-1 px-2.5 sm:pl-2.5', className)}\n      {...props}\n    >\n      <ChevronLeftIcon />\n      <span className=\"hidden sm:block\">Previous</span>\n    </PaginationLink>\n  )\n}\n\nfunction PaginationNext({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) {\n  return (\n    <PaginationLink\n      aria-label=\"Go to next page\"\n      size=\"default\"\n      className={cn('gap-1 px-2.5 sm:pr-2.5', className)}\n      {...props}\n    >\n      <span className=\"hidden sm:block\">Next</span>\n      <ChevronRightIcon />\n    </PaginationLink>\n  )\n}\n\nfunction PaginationEllipsis({\n  className,\n  ...props\n}: React.ComponentProps<'span'>) {\n  return (\n    <span\n      aria-hidden\n      data-slot=\"pagination-ellipsis\"\n      className={cn('flex size-9 items-center justify-center', className)}\n      {...props}\n    >\n      <MoreHorizontalIcon className=\"size-4\" />\n      <span className=\"sr-only\">More pages</span>\n    </span>\n  )\n}\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationLink,\n  PaginationItem,\n  PaginationPrevious,\n  PaginationNext,\n  PaginationEllipsis,\n}\n","size_bytes":2713},"components/ui/popover.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as PopoverPrimitive from '@radix-ui/react-popover'\n\nimport { cn } from '@/lib/utils'\n\nfunction Popover({\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Root>) {\n  return <PopoverPrimitive.Root data-slot=\"popover\" {...props} />\n}\n\nfunction PopoverTrigger({\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Trigger>) {\n  return <PopoverPrimitive.Trigger data-slot=\"popover-trigger\" {...props} />\n}\n\nfunction PopoverContent({\n  className,\n  align = 'center',\n  sideOffset = 4,\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Content>) {\n  return (\n    <PopoverPrimitive.Portal>\n      <PopoverPrimitive.Content\n        data-slot=\"popover-content\"\n        align={align}\n        sideOffset={sideOffset}\n        className={cn(\n          'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-72 origin-(--radix-popover-content-transform-origin) rounded-md border p-4 shadow-md outline-hidden',\n          className,\n        )}\n        {...props}\n      />\n    </PopoverPrimitive.Portal>\n  )\n}\n\nfunction PopoverAnchor({\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Anchor>) {\n  return <PopoverPrimitive.Anchor data-slot=\"popover-anchor\" {...props} />\n}\n\nexport { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }\n","size_bytes":1636},"components/ui/progress.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as ProgressPrimitive from '@radix-ui/react-progress'\n\nimport { cn } from '@/lib/utils'\n\nfunction Progress({\n  className,\n  value,\n  ...props\n}: React.ComponentProps<typeof ProgressPrimitive.Root>) {\n  return (\n    <ProgressPrimitive.Root\n      data-slot=\"progress\"\n      className={cn(\n        'bg-primary/20 relative h-2 w-full overflow-hidden rounded-full',\n        className,\n      )}\n      {...props}\n    >\n      <ProgressPrimitive.Indicator\n        data-slot=\"progress-indicator\"\n        className=\"bg-primary h-full w-full flex-1 transition-all\"\n        style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n      />\n    </ProgressPrimitive.Root>\n  )\n}\n\nexport { Progress }\n","size_bytes":741},"components/ui/radio-group.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as RadioGroupPrimitive from '@radix-ui/react-radio-group'\nimport { CircleIcon } from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\n\nfunction RadioGroup({\n  className,\n  ...props\n}: React.ComponentProps<typeof RadioGroupPrimitive.Root>) {\n  return (\n    <RadioGroupPrimitive.Root\n      data-slot=\"radio-group\"\n      className={cn('grid gap-3', className)}\n      {...props}\n    />\n  )\n}\n\nfunction RadioGroupItem({\n  className,\n  ...props\n}: React.ComponentProps<typeof RadioGroupPrimitive.Item>) {\n  return (\n    <RadioGroupPrimitive.Item\n      data-slot=\"radio-group-item\"\n      className={cn(\n        'border-input text-primary focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 aspect-square size-4 shrink-0 rounded-full border shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50',\n        className,\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator\n        data-slot=\"radio-group-indicator\"\n        className=\"relative flex items-center justify-center\"\n      >\n        <CircleIcon className=\"fill-primary absolute top-1/2 left-1/2 size-2 -translate-x-1/2 -translate-y-1/2\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n}\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"components/ui/resizable.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport { GripVerticalIcon } from 'lucide-react'\nimport * as ResizablePrimitive from 'react-resizable-panels'\n\nimport { cn } from '@/lib/utils'\n\nfunction ResizablePanelGroup({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) {\n  return (\n    <ResizablePrimitive.PanelGroup\n      data-slot=\"resizable-panel-group\"\n      className={cn(\n        'flex h-full w-full data-[panel-group-direction=vertical]:flex-col',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction ResizablePanel({\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.Panel>) {\n  return <ResizablePrimitive.Panel data-slot=\"resizable-panel\" {...props} />\n}\n\nfunction ResizableHandle({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) {\n  return (\n    <ResizablePrimitive.PanelResizeHandle\n      data-slot=\"resizable-handle\"\n      className={cn(\n        'bg-border focus-visible:ring-ring relative flex w-px items-center justify-center after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:ring-1 focus-visible:ring-offset-1 focus-visible:outline-hidden data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:translate-x-0 data-[panel-group-direction=vertical]:after:-translate-y-1/2 [&[data-panel-group-direction=vertical]>div]:rotate-90',\n        className,\n      )}\n      {...props}\n    >\n      {withHandle && (\n        <div className=\"bg-border z-10 flex h-4 w-3 items-center justify-center rounded-xs border\">\n          <GripVerticalIcon className=\"size-2.5\" />\n        </div>\n      )}\n    </ResizablePrimitive.PanelResizeHandle>\n  )\n}\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":2030},"components/ui/scroll-area.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as ScrollAreaPrimitive from '@radix-ui/react-scroll-area'\n\nimport { cn } from '@/lib/utils'\n\nfunction ScrollArea({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof ScrollAreaPrimitive.Root>) {\n  return (\n    <ScrollAreaPrimitive.Root\n      data-slot=\"scroll-area\"\n      className={cn('relative', className)}\n      {...props}\n    >\n      <ScrollAreaPrimitive.Viewport\n        data-slot=\"scroll-area-viewport\"\n        className=\"focus-visible:ring-ring/50 size-full rounded-[inherit] transition-[color,box-shadow] outline-none focus-visible:ring-[3px] focus-visible:outline-1\"\n      >\n        {children}\n      </ScrollAreaPrimitive.Viewport>\n      <ScrollBar />\n      <ScrollAreaPrimitive.Corner />\n    </ScrollAreaPrimitive.Root>\n  )\n}\n\nfunction ScrollBar({\n  className,\n  orientation = 'vertical',\n  ...props\n}: React.ComponentProps<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>) {\n  return (\n    <ScrollAreaPrimitive.ScrollAreaScrollbar\n      data-slot=\"scroll-area-scrollbar\"\n      orientation={orientation}\n      className={cn(\n        'flex touch-none p-px transition-colors select-none',\n        orientation === 'vertical' &&\n          'h-full w-2.5 border-l border-l-transparent',\n        orientation === 'horizontal' &&\n          'h-2.5 flex-col border-t border-t-transparent',\n        className,\n      )}\n      {...props}\n    >\n      <ScrollAreaPrimitive.ScrollAreaThumb\n        data-slot=\"scroll-area-thumb\"\n        className=\"bg-border relative flex-1 rounded-full\"\n      />\n    </ScrollAreaPrimitive.ScrollAreaScrollbar>\n  )\n}\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1646},"components/ui/select.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as SelectPrimitive from '@radix-ui/react-select'\nimport { CheckIcon, ChevronDownIcon, ChevronUpIcon } from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\n\nfunction Select({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Root>) {\n  return <SelectPrimitive.Root data-slot=\"select\" {...props} />\n}\n\nfunction SelectGroup({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Group>) {\n  return <SelectPrimitive.Group data-slot=\"select-group\" {...props} />\n}\n\nfunction SelectValue({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Value>) {\n  return <SelectPrimitive.Value data-slot=\"select-value\" {...props} />\n}\n\nfunction SelectTrigger({\n  className,\n  size = 'default',\n  children,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Trigger> & {\n  size?: 'sm' | 'default'\n}) {\n  return (\n    <SelectPrimitive.Trigger\n      data-slot=\"select-trigger\"\n      data-size={size}\n      className={cn(\n        \"border-input data-[placeholder]:text-muted-foreground [&_svg:not([class*='text-'])]:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 dark:hover:bg-input/50 flex w-fit items-center justify-between gap-2 rounded-md border bg-transparent px-3 py-2 text-sm whitespace-nowrap shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 data-[size=default]:h-9 data-[size=sm]:h-8 *:data-[slot=select-value]:line-clamp-1 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      {...props}\n    >\n      {children}\n      <SelectPrimitive.Icon asChild>\n        <ChevronDownIcon className=\"size-4 opacity-50\" />\n      </SelectPrimitive.Icon>\n    </SelectPrimitive.Trigger>\n  )\n}\n\nfunction SelectContent({\n  className,\n  children,\n  position = 'popper',\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Content>) {\n  return (\n    <SelectPrimitive.Portal>\n      <SelectPrimitive.Content\n        data-slot=\"select-content\"\n        className={cn(\n          'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-h-(--radix-select-content-available-height) min-w-[8rem] origin-(--radix-select-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border shadow-md',\n          position === 'popper' &&\n            'data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1',\n          className,\n        )}\n        position={position}\n        {...props}\n      >\n        <SelectScrollUpButton />\n        <SelectPrimitive.Viewport\n          className={cn(\n            'p-1',\n            position === 'popper' &&\n              'h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)] scroll-my-1',\n          )}\n        >\n          {children}\n        </SelectPrimitive.Viewport>\n        <SelectScrollDownButton />\n      </SelectPrimitive.Content>\n    </SelectPrimitive.Portal>\n  )\n}\n\nfunction SelectLabel({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Label>) {\n  return (\n    <SelectPrimitive.Label\n      data-slot=\"select-label\"\n      className={cn('text-muted-foreground px-2 py-1.5 text-xs', className)}\n      {...props}\n    />\n  )\n}\n\nfunction SelectItem({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Item>) {\n  return (\n    <SelectPrimitive.Item\n      data-slot=\"select-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex w-full cursor-default items-center gap-2 rounded-sm py-1.5 pr-8 pl-2 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 *:[span]:last:flex *:[span]:last:items-center *:[span]:last:gap-2\",\n        className,\n      )}\n      {...props}\n    >\n      <span className=\"absolute right-2 flex size-3.5 items-center justify-center\">\n        <SelectPrimitive.ItemIndicator>\n          <CheckIcon className=\"size-4\" />\n        </SelectPrimitive.ItemIndicator>\n      </span>\n      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n    </SelectPrimitive.Item>\n  )\n}\n\nfunction SelectSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Separator>) {\n  return (\n    <SelectPrimitive.Separator\n      data-slot=\"select-separator\"\n      className={cn('bg-border pointer-events-none -mx-1 my-1 h-px', className)}\n      {...props}\n    />\n  )\n}\n\nfunction SelectScrollUpButton({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.ScrollUpButton>) {\n  return (\n    <SelectPrimitive.ScrollUpButton\n      data-slot=\"select-scroll-up-button\"\n      className={cn(\n        'flex cursor-default items-center justify-center py-1',\n        className,\n      )}\n      {...props}\n    >\n      <ChevronUpIcon className=\"size-4\" />\n    </SelectPrimitive.ScrollUpButton>\n  )\n}\n\nfunction SelectScrollDownButton({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.ScrollDownButton>) {\n  return (\n    <SelectPrimitive.ScrollDownButton\n      data-slot=\"select-scroll-down-button\"\n      className={cn(\n        'flex cursor-default items-center justify-center py-1',\n        className,\n      )}\n      {...props}\n    >\n      <ChevronDownIcon className=\"size-4\" />\n    </SelectPrimitive.ScrollDownButton>\n  )\n}\n\nexport {\n  Select,\n  SelectContent,\n  SelectGroup,\n  SelectItem,\n  SelectLabel,\n  SelectScrollDownButton,\n  SelectScrollUpButton,\n  SelectSeparator,\n  SelectTrigger,\n  SelectValue,\n}\n","size_bytes":6259},"components/ui/separator.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as SeparatorPrimitive from '@radix-ui/react-separator'\n\nimport { cn } from '@/lib/utils'\n\nfunction Separator({\n  className,\n  orientation = 'horizontal',\n  decorative = true,\n  ...props\n}: React.ComponentProps<typeof SeparatorPrimitive.Root>) {\n  return (\n    <SeparatorPrimitive.Root\n      data-slot=\"separator\"\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        'bg-border shrink-0 data-[orientation=horizontal]:h-px data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-px',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Separator }\n","size_bytes":700},"components/ui/sheet.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as SheetPrimitive from '@radix-ui/react-dialog'\nimport { XIcon } from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\n\nfunction Sheet({ ...props }: React.ComponentProps<typeof SheetPrimitive.Root>) {\n  return <SheetPrimitive.Root data-slot=\"sheet\" {...props} />\n}\n\nfunction SheetTrigger({\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Trigger>) {\n  return <SheetPrimitive.Trigger data-slot=\"sheet-trigger\" {...props} />\n}\n\nfunction SheetClose({\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Close>) {\n  return <SheetPrimitive.Close data-slot=\"sheet-close\" {...props} />\n}\n\nfunction SheetPortal({\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Portal>) {\n  return <SheetPrimitive.Portal data-slot=\"sheet-portal\" {...props} />\n}\n\nfunction SheetOverlay({\n  className,\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Overlay>) {\n  return (\n    <SheetPrimitive.Overlay\n      data-slot=\"sheet-overlay\"\n      className={cn(\n        'data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SheetContent({\n  className,\n  children,\n  side = 'right',\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Content> & {\n  side?: 'top' | 'right' | 'bottom' | 'left'\n}) {\n  return (\n    <SheetPortal>\n      <SheetOverlay />\n      <SheetPrimitive.Content\n        data-slot=\"sheet-content\"\n        className={cn(\n          'bg-background data-[state=open]:animate-in data-[state=closed]:animate-out fixed z-50 flex flex-col gap-4 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500',\n          side === 'right' &&\n            'data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right inset-y-0 right-0 h-full w-3/4 border-l sm:max-w-sm',\n          side === 'left' &&\n            'data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left inset-y-0 left-0 h-full w-3/4 border-r sm:max-w-sm',\n          side === 'top' &&\n            'data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top inset-x-0 top-0 h-auto border-b',\n          side === 'bottom' &&\n            'data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom inset-x-0 bottom-0 h-auto border-t',\n          className,\n        )}\n        {...props}\n      >\n        {children}\n        <SheetPrimitive.Close className=\"ring-offset-background focus:ring-ring data-[state=open]:bg-secondary absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none\">\n          <XIcon className=\"size-4\" />\n          <span className=\"sr-only\">Close</span>\n        </SheetPrimitive.Close>\n      </SheetPrimitive.Content>\n    </SheetPortal>\n  )\n}\n\nfunction SheetHeader({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"sheet-header\"\n      className={cn('flex flex-col gap-1.5 p-4', className)}\n      {...props}\n    />\n  )\n}\n\nfunction SheetFooter({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"sheet-footer\"\n      className={cn('mt-auto flex flex-col gap-2 p-4', className)}\n      {...props}\n    />\n  )\n}\n\nfunction SheetTitle({\n  className,\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Title>) {\n  return (\n    <SheetPrimitive.Title\n      data-slot=\"sheet-title\"\n      className={cn('text-foreground font-semibold', className)}\n      {...props}\n    />\n  )\n}\n\nfunction SheetDescription({\n  className,\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Description>) {\n  return (\n    <SheetPrimitive.Description\n      data-slot=\"sheet-description\"\n      className={cn('text-muted-foreground text-sm', className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sheet,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4092},"components/ui/sidebar.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport { Slot } from '@radix-ui/react-slot'\nimport { cva, VariantProps } from 'class-variance-authority'\nimport { PanelLeftIcon } from 'lucide-react'\n\nimport { useIsMobile } from '@/hooks/use-mobile'\nimport { cn } from '@/lib/utils'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Separator } from '@/components/ui/separator'\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from '@/components/ui/sheet'\nimport { Skeleton } from '@/components/ui/skeleton'\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from '@/components/ui/tooltip'\n\nconst SIDEBAR_COOKIE_NAME = 'sidebar_state'\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = '16rem'\nconst SIDEBAR_WIDTH_MOBILE = '18rem'\nconst SIDEBAR_WIDTH_ICON = '3rem'\nconst SIDEBAR_KEYBOARD_SHORTCUT = 'b'\n\ntype SidebarContextProps = {\n  state: 'expanded' | 'collapsed'\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error('useSidebar must be used within a SidebarProvider.')\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<'div'> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === 'function' ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open],\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener('keydown', handleKeyDown)\n    return () => window.removeEventListener('keydown', handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? 'expanded' : 'collapsed'\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar],\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              '--sidebar-width': SIDEBAR_WIDTH,\n              '--sidebar-width-icon': SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            'group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full',\n            className,\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = 'left',\n  variant = 'sidebar',\n  collapsible = 'offcanvas',\n  className,\n  children,\n  ...props\n}: React.ComponentProps<'div'> & {\n  side?: 'left' | 'right'\n  variant?: 'sidebar' | 'floating' | 'inset'\n  collapsible?: 'offcanvas' | 'icon' | 'none'\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === 'none') {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          'bg-sidebar text-sidebar-foreground flex h-full w-(--sidebar-width) flex-col',\n          className,\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-(--sidebar-width) p-0 [&>button]:hidden\"\n          style={\n            {\n              '--sidebar-width': SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === 'collapsed' ? collapsible : ''}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          'relative w-(--sidebar-width) bg-transparent transition-[width] duration-200 ease-linear',\n          'group-data-[collapsible=offcanvas]:w-0',\n          'group-data-[side=right]:rotate-180',\n          variant === 'floating' || variant === 'inset'\n            ? 'group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+(--spacing(4)))]'\n            : 'group-data-[collapsible=icon]:w-(--sidebar-width-icon)',\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          'fixed inset-y-0 z-10 hidden h-svh w-(--sidebar-width) transition-[left,right,width] duration-200 ease-linear md:flex',\n          side === 'left'\n            ? 'left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]'\n            : 'right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]',\n          // Adjust the padding for floating and inset variants.\n          variant === 'floating' || variant === 'inset'\n            ? 'p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+(--spacing(4))+2px)]'\n            : 'group-data-[collapsible=icon]:w-(--sidebar-width-icon) group-data-[side=left]:border-r group-data-[side=right]:border-l',\n          className,\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn('size-7', className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<'button'>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        'hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex',\n        'in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize',\n        '[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize',\n        'hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full',\n        '[[data-side=left][data-collapsible=offcanvas]_&]:-right-2',\n        '[[data-side=right][data-collapsible=offcanvas]_&]:-left-2',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<'main'>) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        'bg-background relative flex w-full flex-1 flex-col',\n        'md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn('bg-background h-8 w-full shadow-none', className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn('flex flex-col gap-2 p-2', className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn('flex flex-col gap-2 p-2', className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn('bg-sidebar-border mx-2 w-auto', className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        'flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn('relative flex w-full min-w-0 flex-col p-2', className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<'div'> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : 'div'\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        'text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0',\n        'group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<'button'> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : 'button'\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        'text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0',\n        // Increases the hit area of the button on mobile.\n        'after:absolute after:-inset-2 md:after:hidden',\n        'group-data-[collapsible=icon]:hidden',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn('w-full text-sm', className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<'ul'>) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn('flex w-full min-w-0 flex-col gap-1', className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<'li'>) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn('group/menu-item relative', className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  'peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:size-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0',\n  {\n    variants: {\n      variant: {\n        default: 'hover:bg-sidebar-accent hover:text-sidebar-accent-foreground',\n        outline:\n          'bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]',\n      },\n      size: {\n        default: 'h-8 text-sm',\n        sm: 'h-7 text-xs',\n        lg: 'h-12 text-sm group-data-[collapsible=icon]:p-0!',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  },\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = 'default',\n  size = 'default',\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<'button'> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : 'button'\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === 'string') {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== 'collapsed' || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<'button'> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : 'button'\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        'text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0',\n        // Increases the hit area of the button on mobile.\n        'after:absolute after:-inset-2 md:after:hidden',\n        'peer-data-[size=sm]/menu-button:top-1',\n        'peer-data-[size=default]/menu-button:top-1.5',\n        'peer-data-[size=lg]/menu-button:top-2.5',\n        'group-data-[collapsible=icon]:hidden',\n        showOnHover &&\n          'peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        'text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none',\n        'peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground',\n        'peer-data-[size=sm]/menu-button:top-1',\n        'peer-data-[size=default]/menu-button:top-1.5',\n        'peer-data-[size=lg]/menu-button:top-2.5',\n        'group-data-[collapsible=icon]:hidden',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<'div'> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn('flex h-8 items-center gap-2 rounded-md px-2', className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-(--skeleton-width) flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            '--skeleton-width': width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<'ul'>) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        'border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5',\n        'group-data-[collapsible=icon]:hidden',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<'li'>) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn('group/menu-sub-item relative', className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = 'md',\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<'a'> & {\n  asChild?: boolean\n  size?: 'sm' | 'md'\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : 'a'\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        'text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline-hidden focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0',\n        'data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground',\n        size === 'sm' && 'text-xs',\n        size === 'md' && 'text-sm',\n        'group-data-[collapsible=icon]:hidden',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21649},"components/ui/skeleton.tsx":{"content":"import { cn } from '@/lib/utils'\n\nfunction Skeleton({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"skeleton\"\n      className={cn('bg-accent animate-pulse rounded-md', className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":276},"components/ui/slider.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as SliderPrimitive from '@radix-ui/react-slider'\n\nimport { cn } from '@/lib/utils'\n\nfunction Slider({\n  className,\n  defaultValue,\n  value,\n  min = 0,\n  max = 100,\n  ...props\n}: React.ComponentProps<typeof SliderPrimitive.Root>) {\n  const _values = React.useMemo(\n    () =>\n      Array.isArray(value)\n        ? value\n        : Array.isArray(defaultValue)\n          ? defaultValue\n          : [min, max],\n    [value, defaultValue, min, max],\n  )\n\n  return (\n    <SliderPrimitive.Root\n      data-slot=\"slider\"\n      defaultValue={defaultValue}\n      value={value}\n      min={min}\n      max={max}\n      className={cn(\n        'relative flex w-full touch-none items-center select-none data-[disabled]:opacity-50 data-[orientation=vertical]:h-full data-[orientation=vertical]:min-h-44 data-[orientation=vertical]:w-auto data-[orientation=vertical]:flex-col',\n        className,\n      )}\n      {...props}\n    >\n      <SliderPrimitive.Track\n        data-slot=\"slider-track\"\n        className={\n          'bg-muted relative grow overflow-hidden rounded-full data-[orientation=horizontal]:h-1.5 data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-1.5'\n        }\n      >\n        <SliderPrimitive.Range\n          data-slot=\"slider-range\"\n          className={\n            'bg-primary absolute data-[orientation=horizontal]:h-full data-[orientation=vertical]:w-full'\n          }\n        />\n      </SliderPrimitive.Track>\n      {Array.from({ length: _values.length }, (_, index) => (\n        <SliderPrimitive.Thumb\n          data-slot=\"slider-thumb\"\n          key={index}\n          className=\"border-primary bg-background ring-ring/50 block size-4 shrink-0 rounded-full border shadow-sm transition-[color,box-shadow] hover:ring-4 focus-visible:ring-4 focus-visible:outline-hidden disabled:pointer-events-none disabled:opacity-50\"\n        />\n      ))}\n    </SliderPrimitive.Root>\n  )\n}\n\nexport { Slider }\n","size_bytes":1995},"components/ui/sonner.tsx":{"content":"'use client'\n\nimport { useTheme } from 'next-themes'\nimport { Toaster as Sonner, ToasterProps } from 'sonner'\n\nconst Toaster = ({ ...props }: ToasterProps) => {\n  const { theme = 'system' } = useTheme()\n\n  return (\n    <Sonner\n      theme={theme as ToasterProps['theme']}\n      className=\"toaster group\"\n      style={\n        {\n          '--normal-bg': 'var(--popover)',\n          '--normal-text': 'var(--popover-foreground)',\n          '--normal-border': 'var(--border)',\n        } as React.CSSProperties\n      }\n      {...props}\n    />\n  )\n}\n\nexport { Toaster }\n","size_bytes":564},"components/ui/switch.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as SwitchPrimitive from '@radix-ui/react-switch'\n\nimport { cn } from '@/lib/utils'\n\nfunction Switch({\n  className,\n  ...props\n}: React.ComponentProps<typeof SwitchPrimitive.Root>) {\n  return (\n    <SwitchPrimitive.Root\n      data-slot=\"switch\"\n      className={cn(\n        'peer data-[state=checked]:bg-primary data-[state=unchecked]:bg-input focus-visible:border-ring focus-visible:ring-ring/50 dark:data-[state=unchecked]:bg-input/80 inline-flex h-[1.15rem] w-8 shrink-0 items-center rounded-full border border-transparent shadow-xs transition-all outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50',\n        className,\n      )}\n      {...props}\n    >\n      <SwitchPrimitive.Thumb\n        data-slot=\"switch-thumb\"\n        className={\n          'bg-background dark:data-[state=unchecked]:bg-foreground dark:data-[state=checked]:bg-primary-foreground pointer-events-none block size-4 rounded-full ring-0 transition-transform data-[state=checked]:translate-x-[calc(100%-2px)] data-[state=unchecked]:translate-x-0'\n        }\n      />\n    </SwitchPrimitive.Root>\n  )\n}\n\nexport { Switch }\n","size_bytes":1174},"components/ui/table.tsx":{"content":"'use client'\n\nimport * as React from 'react'\n\nimport { cn } from '@/lib/utils'\n\nfunction Table({ className, ...props }: React.ComponentProps<'table'>) {\n  return (\n    <div\n      data-slot=\"table-container\"\n      className=\"relative w-full overflow-x-auto\"\n    >\n      <table\n        data-slot=\"table\"\n        className={cn('w-full caption-bottom text-sm', className)}\n        {...props}\n      />\n    </div>\n  )\n}\n\nfunction TableHeader({ className, ...props }: React.ComponentProps<'thead'>) {\n  return (\n    <thead\n      data-slot=\"table-header\"\n      className={cn('[&_tr]:border-b', className)}\n      {...props}\n    />\n  )\n}\n\nfunction TableBody({ className, ...props }: React.ComponentProps<'tbody'>) {\n  return (\n    <tbody\n      data-slot=\"table-body\"\n      className={cn('[&_tr:last-child]:border-0', className)}\n      {...props}\n    />\n  )\n}\n\nfunction TableFooter({ className, ...props }: React.ComponentProps<'tfoot'>) {\n  return (\n    <tfoot\n      data-slot=\"table-footer\"\n      className={cn(\n        'bg-muted/50 border-t font-medium [&>tr]:last:border-b-0',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TableRow({ className, ...props }: React.ComponentProps<'tr'>) {\n  return (\n    <tr\n      data-slot=\"table-row\"\n      className={cn(\n        'hover:bg-muted/50 data-[state=selected]:bg-muted border-b transition-colors',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TableHead({ className, ...props }: React.ComponentProps<'th'>) {\n  return (\n    <th\n      data-slot=\"table-head\"\n      className={cn(\n        'text-foreground h-10 px-2 text-left align-middle font-medium whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TableCell({ className, ...props }: React.ComponentProps<'td'>) {\n  return (\n    <td\n      data-slot=\"table-cell\"\n      className={cn(\n        'p-2 align-middle whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TableCaption({\n  className,\n  ...props\n}: React.ComponentProps<'caption'>) {\n  return (\n    <caption\n      data-slot=\"table-caption\"\n      className={cn('text-muted-foreground mt-4 text-sm', className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2452},"components/ui/tabs.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as TabsPrimitive from '@radix-ui/react-tabs'\n\nimport { cn } from '@/lib/utils'\n\nfunction Tabs({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.Root>) {\n  return (\n    <TabsPrimitive.Root\n      data-slot=\"tabs\"\n      className={cn('flex flex-col gap-2', className)}\n      {...props}\n    />\n  )\n}\n\nfunction TabsList({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.List>) {\n  return (\n    <TabsPrimitive.List\n      data-slot=\"tabs-list\"\n      className={cn(\n        'bg-muted text-muted-foreground inline-flex h-9 w-fit items-center justify-center rounded-lg p-[3px]',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TabsTrigger({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.Trigger>) {\n  return (\n    <TabsPrimitive.Trigger\n      data-slot=\"tabs-trigger\"\n      className={cn(\n        \"data-[state=active]:bg-background dark:data-[state=active]:text-foreground focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:outline-ring dark:data-[state=active]:border-input dark:data-[state=active]:bg-input/30 text-foreground dark:text-muted-foreground inline-flex h-[calc(100%-1px)] flex-1 items-center justify-center gap-1.5 rounded-md border border-transparent px-2 py-1 text-sm font-medium whitespace-nowrap transition-[color,box-shadow] focus-visible:ring-[3px] focus-visible:outline-1 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:shadow-sm [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TabsContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.Content>) {\n  return (\n    <TabsPrimitive.Content\n      data-slot=\"tabs-content\"\n      className={cn('flex-1 outline-none', className)}\n      {...props}\n    />\n  )\n}\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1971},"components/ui/textarea.tsx":{"content":"import * as React from 'react'\n\nimport { cn } from '@/lib/utils'\n\nfunction Textarea({ className, ...props }: React.ComponentProps<'textarea'>) {\n  return (\n    <textarea\n      data-slot=\"textarea\"\n      className={cn(\n        'border-input placeholder:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 flex field-sizing-content min-h-16 w-full rounded-md border bg-transparent px-3 py-2 text-base shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Textarea }\n","size_bytes":760},"components/ui/toast.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as ToastPrimitives from '@radix-ui/react-toast'\nimport { cva, type VariantProps } from 'class-variance-authority'\nimport { X } from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      'fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]',\n      className,\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  'group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full',\n  {\n    variants: {\n      variant: {\n        default: 'border bg-background text-foreground',\n        destructive:\n          'destructive group border-destructive bg-destructive text-destructive-foreground',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n    },\n  },\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      'inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive',\n      className,\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      'absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600',\n      className,\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn('text-sm font-semibold', className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn('text-sm opacity-90', className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4863},"components/ui/toaster.tsx":{"content":"'use client'\n\nimport { useToast } from '@/hooks/use-toast'\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from '@/components/ui/toast'\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":786},"components/ui/toggle-group.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as ToggleGroupPrimitive from '@radix-ui/react-toggle-group'\nimport { type VariantProps } from 'class-variance-authority'\n\nimport { cn } from '@/lib/utils'\nimport { toggleVariants } from '@/components/ui/toggle'\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: 'default',\n  variant: 'default',\n})\n\nfunction ToggleGroup({\n  className,\n  variant,\n  size,\n  children,\n  ...props\n}: React.ComponentProps<typeof ToggleGroupPrimitive.Root> &\n  VariantProps<typeof toggleVariants>) {\n  return (\n    <ToggleGroupPrimitive.Root\n      data-slot=\"toggle-group\"\n      data-variant={variant}\n      data-size={size}\n      className={cn(\n        'group/toggle-group flex w-fit items-center rounded-md data-[variant=outline]:shadow-xs',\n        className,\n      )}\n      {...props}\n    >\n      <ToggleGroupContext.Provider value={{ variant, size }}>\n        {children}\n      </ToggleGroupContext.Provider>\n    </ToggleGroupPrimitive.Root>\n  )\n}\n\nfunction ToggleGroupItem({\n  className,\n  children,\n  variant,\n  size,\n  ...props\n}: React.ComponentProps<typeof ToggleGroupPrimitive.Item> &\n  VariantProps<typeof toggleVariants>) {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      data-slot=\"toggle-group-item\"\n      data-variant={context.variant || variant}\n      data-size={context.size || size}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        'min-w-0 flex-1 shrink-0 rounded-none shadow-none first:rounded-l-md last:rounded-r-md focus:z-10 focus-visible:z-10 data-[variant=outline]:border-l-0 data-[variant=outline]:first:border-l',\n        className,\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n}\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1927},"components/ui/toggle.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as TogglePrimitive from '@radix-ui/react-toggle'\nimport { cva, type VariantProps } from 'class-variance-authority'\n\nimport { cn } from '@/lib/utils'\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center gap-2 rounded-md text-sm font-medium hover:bg-muted hover:text-muted-foreground disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 [&_svg]:shrink-0 focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] outline-none transition-[color,box-shadow] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive whitespace-nowrap\",\n  {\n    variants: {\n      variant: {\n        default: 'bg-transparent',\n        outline:\n          'border border-input bg-transparent shadow-xs hover:bg-accent hover:text-accent-foreground',\n      },\n      size: {\n        default: 'h-9 px-2 min-w-9',\n        sm: 'h-8 px-1.5 min-w-8',\n        lg: 'h-10 px-2.5 min-w-10',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  },\n)\n\nfunction Toggle({\n  className,\n  variant,\n  size,\n  ...props\n}: React.ComponentProps<typeof TogglePrimitive.Root> &\n  VariantProps<typeof toggleVariants>) {\n  return (\n    <TogglePrimitive.Root\n      data-slot=\"toggle\"\n      className={cn(toggleVariants({ variant, size, className }))}\n      {...props}\n    />\n  )\n}\n\nexport { Toggle, toggleVariants }\n","size_bytes":1571},"components/ui/tooltip.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as TooltipPrimitive from '@radix-ui/react-tooltip'\n\nimport { cn } from '@/lib/utils'\n\nfunction TooltipProvider({\n  delayDuration = 0,\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Provider>) {\n  return (\n    <TooltipPrimitive.Provider\n      data-slot=\"tooltip-provider\"\n      delayDuration={delayDuration}\n      {...props}\n    />\n  )\n}\n\nfunction Tooltip({\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Root>) {\n  return (\n    <TooltipProvider>\n      <TooltipPrimitive.Root data-slot=\"tooltip\" {...props} />\n    </TooltipProvider>\n  )\n}\n\nfunction TooltipTrigger({\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Trigger>) {\n  return <TooltipPrimitive.Trigger data-slot=\"tooltip-trigger\" {...props} />\n}\n\nfunction TooltipContent({\n  className,\n  sideOffset = 0,\n  children,\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Content>) {\n  return (\n    <TooltipPrimitive.Portal>\n      <TooltipPrimitive.Content\n        data-slot=\"tooltip-content\"\n        sideOffset={sideOffset}\n        className={cn(\n          'bg-primary text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-fit origin-(--radix-tooltip-content-transform-origin) rounded-md px-3 py-1.5 text-xs text-balance',\n          className,\n        )}\n        {...props}\n      >\n        {children}\n        <TooltipPrimitive.Arrow className=\"bg-primary fill-primary z-50 size-2.5 translate-y-[calc(-50%_-_2px)] rotate-45 rounded-[2px]\" />\n      </TooltipPrimitive.Content>\n    </TooltipPrimitive.Portal>\n  )\n}\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1892},"components/ui/use-mobile.tsx":{"content":"import * as React from 'react'\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener('change', onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener('change', onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"components/ui/use-toast.ts":{"content":"'use client'\n\n// Inspired by react-hot-toast library\nimport * as React from 'react'\n\nimport type { ToastActionElement, ToastProps } from '@/components/ui/toast'\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: 'ADD_TOAST',\n  UPDATE_TOAST: 'UPDATE_TOAST',\n  DISMISS_TOAST: 'DISMISS_TOAST',\n  REMOVE_TOAST: 'REMOVE_TOAST',\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType['ADD_TOAST']\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType['UPDATE_TOAST']\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType['DISMISS_TOAST']\n      toastId?: ToasterToast['id']\n    }\n  | {\n      type: ActionType['REMOVE_TOAST']\n      toastId?: ToasterToast['id']\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: 'REMOVE_TOAST',\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case 'ADD_TOAST':\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case 'UPDATE_TOAST':\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t,\n        ),\n      }\n\n    case 'DISMISS_TOAST': {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t,\n        ),\n      }\n    }\n    case 'REMOVE_TOAST':\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, 'id'>\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: 'UPDATE_TOAST',\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: 'DISMISS_TOAST', toastId: id })\n\n  dispatch({\n    type: 'ADD_TOAST',\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: 'DISMISS_TOAST', toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3945},"app/dashboard/farms/page.tsx":{"content":"\"use client\";\n\nimport { useEffect, useState, useCallback } from \"react\";\nimport { DashboardLayout } from \"@/components/dashboard/dashboard-layout\";\nimport { AddFarmDialog } from \"@/components/farms/add-farm-dialog\";\nimport { FarmCard } from \"@/components/farms/farm-card\";\nimport { useAuth } from \"@/contexts/auth-context\";\nimport { apiClient } from \"@/lib/api\";\nimport { useRouter } from \"next/navigation\";\nimport { Loader2 } from \"lucide-react\";\n\n// Type for a farm\ninterface Farm {\n  id: string;\n  name: string;\n  location?: string;\n}\n\nexport default function FarmsPage() {\n  const { user, loading } = useAuth();\n  const [farms, setFarms] = useState<Farm[]>([]);\n  const [isLoadingFarms, setIsLoadingFarms] = useState(true);\n  const router = useRouter();\n\n  // Function to load farms from API\n  const loadFarms = useCallback(async () => {\n    setIsLoadingFarms(true);\n    try {\n      const response = await apiClient.getFarms();\n      setFarms(response.farms || []);\n    } catch (error) {\n      console.error(\"Error loading farms:\", error);\n    } finally {\n      setIsLoadingFarms(false);\n    }\n  }, []);\n\n  // Redirect unauthenticated users and load farms\n  useEffect(() => {\n    if (!loading) {\n      if (!user) {\n        router.push(\"/login\");\n      } else {\n        loadFarms();\n      }\n    }\n  }, [user, loading, router, loadFarms]);\n\n  // Show full-page loader if auth or farm data is loading\n  if (loading || !user || isLoadingFarms) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <Loader2 className=\"w-8 h-8 animate-spin mx-auto mb-4\" />\n          <p className=\"text-muted-foreground\">Loading farms...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <DashboardLayout>\n      <div className=\"space-y-8\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-foreground\">My Farms</h1>\n            <p className=\"text-muted-foreground mt-2\">\n              Manage your farm locations and properties.\n            </p>\n          </div>\n          <AddFarmDialog onFarmAdded={loadFarms} />\n        </div>\n\n        {/* Farms Grid */}\n        {farms.length > 0 ? (\n          <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-3\">\n            {farms.map((farm) => (\n              <FarmCard key={farm.id} farm={farm} />\n            ))}\n          </div>\n        ) : (\n          <div className=\"text-center py-12\">\n            <p className=\"text-muted-foreground mb-4\">No farms added yet.</p>\n            <AddFarmDialog onFarmAdded={loadFarms} />\n          </div>\n        )}\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":2710},"app/dashboard/predictions/page.tsx":{"content":"\"use client\"\n\nimport { useEffect } from \"react\"\nimport { DashboardLayout } from \"@/components/dashboard/dashboard-layout\"\nimport { PredictionHistory } from \"@/components/predictions/prediction-history\"\nimport { Button } from \"@/components/ui/button\"\nimport { useAuth } from \"@/contexts/auth-context\"\nimport { useRouter } from \"next/navigation\"\nimport Link from \"next/link\"\nimport { Plus } from \"lucide-react\"\n\nexport default function PredictionsPage() {\n  const { user, loading } = useAuth()\n  const router = useRouter()\n\n  useEffect(() => {\n    if (!loading && !user) {\n      router.push(\"/login\")\n      return\n    }\n  }, [user, loading, router])\n\n  if (loading || !user) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading...</p>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <DashboardLayout>\n      <div className=\"space-y-8\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-foreground\">Prediction History</h1>\n            <p className=\"text-muted-foreground mt-2\">View all your crop yield predictions and their results.</p>\n          </div>\n          <Link href=\"/dashboard/predictions/new\">\n            <Button>\n              <Plus className=\"w-4 h-4 mr-2\" />\n              New Prediction\n            </Button>\n          </Link>\n        </div>\n\n        {/* Prediction History */}\n        <PredictionHistory />\n      </div>\n    </DashboardLayout>\n  )\n}\n","size_bytes":1700},"app/dashboard/profile/page.tsx":{"content":"\"use client\"\n\nimport type React from \"react\"\n\nimport { useEffect, useState } from \"react\"\nimport { DashboardLayout } from \"@/components/dashboard/dashboard-layout\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport { useAuth } from \"@/contexts/auth-context\"\nimport { apiClient } from \"@/lib/api\"\nimport { useRouter } from \"next/navigation\"\nimport { useToast } from \"@/hooks/use-toast\"\nimport { User, Mail, Phone, Loader2 } from \"lucide-react\"\n\nexport default function ProfilePage() {\n  const { user, profile, loading, refreshProfile } = useAuth()\n  const [isLoading, setIsLoading] = useState(false)\n  const [formData, setFormData] = useState({\n    name: \"\",\n    email: \"\",\n    phone: \"\",\n    role: \"\",\n  })\n  const router = useRouter()\n  const { toast } = useToast()\n\n  useEffect(() => {\n    if (!loading && !user) {\n      router.push(\"/login\")\n      return\n    }\n\n    if (profile) {\n      setFormData({\n        name: profile.name || \"\",\n        email: profile.email || \"\",\n        phone: profile.phone || \"\",\n        role: profile.role || \"farmer\",\n      })\n    }\n  }, [user, profile, loading, router])\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setIsLoading(true)\n\n    try {\n      await apiClient.updateProfile({\n        name: formData.name,\n        email: formData.email,\n        phone: formData.phone,\n        role: formData.role,\n      })\n\n      await refreshProfile()\n\n      toast({\n        title: \"Profile updated\",\n        description: \"Your profile has been updated successfully.\",\n      })\n    } catch (error: any) {\n      toast({\n        title: \"Update failed\",\n        description: error.message,\n        variant: \"destructive\",\n      })\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  if (loading || !user) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading...</p>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <DashboardLayout>\n      <div className=\"space-y-8\">\n        {/* Header */}\n        <div>\n          <h1 className=\"text-3xl font-bold text-foreground\">Profile Settings</h1>\n          <p className=\"text-muted-foreground mt-2\">Manage your account information and preferences.</p>\n        </div>\n\n        {/* Profile Form */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Personal Information</CardTitle>\n            <CardDescription>Update your personal details and contact information.</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-6\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"name\">Full Name</Label>\n                <div className=\"relative\">\n                  <User className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n                  <Input\n                    id=\"name\"\n                    type=\"text\"\n                    placeholder=\"Enter your full name\"\n                    value={formData.name}\n                    onChange={(e) => setFormData((prev) => ({ ...prev, name: e.target.value }))}\n                    className=\"pl-10\"\n                    required\n                  />\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\">Email Address</Label>\n                <div className=\"relative\">\n                  <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    placeholder=\"Enter your email\"\n                    value={formData.email}\n                    onChange={(e) => setFormData((prev) => ({ ...prev, email: e.target.value }))}\n                    className=\"pl-10\"\n                    required\n                  />\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"phone\">Phone Number</Label>\n                <div className=\"relative\">\n                  <Phone className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n                  <Input\n                    id=\"phone\"\n                    type=\"tel\"\n                    placeholder=\"Enter your phone number\"\n                    value={formData.phone}\n                    onChange={(e) => setFormData((prev) => ({ ...prev, phone: e.target.value }))}\n                    className=\"pl-10\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"role\">Role</Label>\n                <Select\n                  value={formData.role}\n                  onValueChange={(value) => setFormData((prev) => ({ ...prev, role: value }))}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select your role\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"farmer\">Farmer</SelectItem>\n                    <SelectItem value=\"agricultural_consultant\">Agricultural Consultant</SelectItem>\n                    <SelectItem value=\"researcher\">Researcher</SelectItem>\n                    <SelectItem value=\"student\">Student</SelectItem>\n                    <SelectItem value=\"other\">Other</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <Button type=\"submit\" disabled={isLoading}>\n                {isLoading ? <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" /> : null}\n                Update Profile\n              </Button>\n            </form>\n          </CardContent>\n        </Card>\n      </div>\n    </DashboardLayout>\n  )\n}\n","size_bytes":6253},"app/dashboard/predictions/new/page.tsx":{"content":"\"use client\"\n\nimport { useEffect, useState } from \"react\"\nimport { DashboardLayout } from \"@/components/dashboard/dashboard-layout\"\nimport { PredictionForm } from \"@/components/predictions/prediction-form\"\nimport { PredictionResult } from \"@/components/predictions/prediction-result\"\nimport { Button } from \"@/components/ui/button\"\nimport { useAuth } from \"@/contexts/auth-context\"\nimport { useRouter } from \"next/navigation\"\nimport Link from \"next/link\"\nimport { ArrowLeft } from \"lucide-react\"\n\nexport default function NewPredictionPage() {\n  const { user, loading } = useAuth()\n  const [predictionResult, setPredictionResult] = useState(null)\n  const router = useRouter()\n\n  useEffect(() => {\n    if (!loading && !user) {\n      router.push(\"/login\")\n      return\n    }\n  }, [user, loading, router])\n\n  const handlePredictionComplete = (result: any) => {\n    setPredictionResult(result)\n  }\n\n  const handleNewPrediction = () => {\n    setPredictionResult(null)\n  }\n\n  if (loading || !user) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading...</p>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <DashboardLayout>\n      <div className=\"space-y-8\">\n        {/* Header */}\n        <div className=\"flex items-center gap-4\">\n          <Link href=\"/dashboard/predictions\">\n            <Button variant=\"ghost\" size=\"sm\">\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Predictions\n            </Button>\n          </Link>\n          <div>\n            <h1 className=\"text-3xl font-bold text-foreground\">\n              {predictionResult ? \"Prediction Result\" : \"New Prediction\"}\n            </h1>\n            <p className=\"text-muted-foreground mt-2\">\n              {predictionResult\n                ? \"Your crop yield prediction has been generated successfully.\"\n                : \"Create a new crop yield prediction using AI analysis.\"}\n            </p>\n          </div>\n        </div>\n\n        {/* Content */}\n        {predictionResult ? (\n          <div className=\"space-y-6\">\n            <PredictionResult result={predictionResult} />\n            <div className=\"flex gap-4\">\n              <Button onClick={handleNewPrediction}>Make Another Prediction</Button>\n              <Link href=\"/dashboard/predictions\">\n                <Button variant=\"outline\">View All Predictions</Button>\n              </Link>\n            </div>\n          </div>\n        ) : (\n          <PredictionForm onPredictionComplete={handlePredictionComplete} />\n        )}\n      </div>\n    </DashboardLayout>\n  )\n}\n","size_bytes":2749},"replit.md":{"content":"# Crop Yield Prediction System - Replit Setup\n\n## Overview\nThis is a full-stack crop yield prediction application built with Next.js frontend and FastAPI backend. The system uses machine learning models to predict crop yields based on various agricultural parameters.\n\n## Recent Changes (September 21, 2025)\n- Successfully imported and configured the application for Replit environment\n- Set up Python backend with FastAPI and all required dependencies\n- Configured Next.js frontend with proper host settings for Replit proxy\n- Updated CORS settings for cross-origin requests\n- Created placeholder Firebase configuration (requires user's real credentials)\n- Set up deployment configuration for autoscale production deployment\n- Created sample data fallbacks when Firebase is not configured\n\n## Project Architecture\n\n### Frontend (Port 5000)\n- **Technology**: Next.js 15 with React, TypeScript, Tailwind CSS\n- **Components**: Modern UI with authentication, farm management, prediction forms\n- **Deployment**: Configured for autoscale deployment\n\n### Backend (Port 8000) \n- **Technology**: FastAPI with Python 3.11\n- **Features**: ML crop yield prediction, Firebase integration, weather API\n- **Models**: Pre-trained CatBoost models with 55+ crop types\n- **API Endpoints**: \n  - `/api/predict` - Make crop yield predictions\n  - `/api/add-farm` - Add new farms\n  - `/api/get-farms` - Retrieve user farms\n  - `/api/get-predictions` - Get prediction history\n  - `/api/crops` - List available crop types\n\n### Database\n- **Technology**: Firebase Firestore (requires configuration)\n- **Fallback**: Sample data when Firebase not configured\n- **Collections**: users, farms, predictions\n\n## Current Status\n✅ **Frontend**: Running successfully on port 5000 with modern UI\n✅ **Backend**: Configured and ready (requires Firebase credentials for full functionality)\n✅ **ML Models**: Loaded successfully with 55 crop types available\n✅ **Deployment**: Configured for production autoscale deployment\n\n## User Configuration Required\n\n### Firebase Setup\n1. Create a Firebase project with Firestore enabled\n2. Replace placeholder values in `.env.local` with your Firebase configuration\n3. Add your Firebase service account JSON as `backend/firebase-service-account.json`\n\n### Optional Enhancements\n- Add OpenWeatherMap API key to `backend/.env` for real weather data\n- Configure additional crop types in the ML model\n- Customize UI components and styling\n\n## User Preferences\n- Uses modern React/Next.js patterns with TypeScript\n- Prefers FastAPI for Python backend APIs\n- Uses Tailwind CSS for styling with shadcn/ui components\n- Machine learning integration with CatBoost models\n- Firebase for authentication and data storage\n\n## Workflow Configuration\n- **Frontend Workflow**: `npx next dev --hostname 0.0.0.0 --port 5000`\n- **Backend Workflow**: `cd backend && python main.py`\n- **Deployment**: Autoscale configuration with npm build/start commands","size_bytes":2939}},"version":1}